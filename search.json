[{"path":"https://ethz-ins.github.io/epiwraps/articles/bam2bw.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Generating bigwig tracks with bam2bw","text":"bam2bw function can used compute per-nucleotide per-bin coverage alignments save bigwig file. process, information individual reads lost, produced signals considerably lightweight amenable visualization. bigwig format readily queried R compatible variety tools, including genome browsers.","code":""},{"path":"https://ethz-ins.github.io/epiwraps/articles/bam2bw.html","id":"many-ways-of-compiling-coverage","dir":"Articles","previous_headings":"Introduction","what":"Many ways of compiling coverage","title":"Generating bigwig tracks with bam2bw","text":"introduce different variations coverage, let’s assume ’ve go following single-end reads:  testing purposes, ’ll save bam file index : Using example reads, can illustrate different ways computing coverages. First, can save coverage different resolutions, full resolution (nucleotide single bin) larger bin sizes, latter giving smaller filesizes:  tracks compile number reads overlap position, bottom track signal chunks 25 nucleotides. default, maximum signal inside bin used, however possible change :  cases, single-end reads just beginning DNA fragments obtained, know average size fragments library prep QC (, see estimateFragSize function, simpler estimate.mean.fraglen function chipseq package). therefore common extend reads size computing coverage, obtain number fragments (rather reads) coverage position. can done follows:  Taking account read extension shows better peak center, indicative fact region enriched captured fragments. Instead computing coverage, compute number reads starting, ending, centered position:  Note extending reads, case, position (e.g. “center”) relative extended read (.e. extension applied first).","code":"suppressPackageStartupMessages(library(epiwraps)) # we create some arbitrary genomic ranges gr <- GRanges(\"chr1\", IRanges(c(30,70,120), width=50), strand=c(\"+\",\"+\",\"-\"),               seqlengths=c(chr1=500)) plotSignalTracks(list(reads=gr), region=\"chr1:1:180\", extend=0, genomeAxis=FALSE) bam <- tempfile(fileext = \".bam\") # temp file name rtracklayer::export(gr, bam, format=\"bam\") Rsamtools::indexBam(bam) ##       /tmp/Rtmp4TV65s/file33b820a6ffb3.bam  ## \"/tmp/Rtmp4TV65s/file33b820a6ffb3.bam.bai\" # Full coverage with bin width of 1 nucleotide (i.e. full resolution) cov_full_bw1 <- tempfile(fileext = \".bw\") # temp file name bam2bw(bam, cov_full_bw1, binWidth=1L, scaling=FALSE) ## `paired` not specified, assuming single-end reads. Set to paired='auto' to automatically detect. ## Reading in signal... ## Writing bigwig... # Full coverage with larger bins cov_full_bw25 <- tempfile(fileext = \".bw\") bam2bw(bam, cov_full_bw25, binWidth=25L, scaling=FALSE) ## `paired` not specified, assuming single-end reads. Set to paired='auto' to automatically detect. ## Reading in signal... ## Writing bigwig... plotSignalTracks(list(reads=gr, \"binWidth=1\"=cov_full_bw1, \"binWidth=25\"=cov_full_bw25),                  region=\"chr1:1:180\", extend=0) # Using mean per bin: cov_full_bw25mean <- tempfile(fileext = \".bw\") bam2bw(bam, cov_full_bw25mean, binWidth=25L, binSummarization = \"mean\", scaling=FALSE) ## `paired` not specified, assuming single-end reads. Set to paired='auto' to automatically detect. ## Reading in signal... ## Writing bigwig... plotSignalTracks(list(reads=gr, \"binWidth=1\"=cov_full_bw1,                        \"binWidth=25\\n(max)\"=cov_full_bw25,                       \"binWidth=25\\n(mean)\"=cov_full_bw25mean),                  region=\"chr1:1:180\", extend=0) # Here the reads are 50bp, and we want to extend them to 100bp, hence _by_ 50: cov_full_ext <- tempfile(fileext = \".bw\") bam2bw(bam, cov_full_ext, binWidth=1L, extend=50L, scaling=FALSE) ## `paired` not specified, assuming single-end reads. Set to paired='auto' to automatically detect. ## Reading in signal... ## Writing bigwig... plotSignalTracks(list(reads=gr, \"no extension\"=cov_full_bw1,                        \"read extension\"=cov_full_ext),                  region=\"chr1:1:190\", extend=0) # Here the reads are 50bp, and we want to extend them to 100bp, hence _by_ 50: cov_start <- tempfile(fileext = \".bw\") bam2bw(bam, cov_start, binWidth=1L, extend=50L, scaling=FALSE, type=\"start\") ## `paired` not specified, assuming single-end reads. Set to paired='auto' to automatically detect. ## Reading in signal... ## Writing bigwig... cov_center <- tempfile(fileext = \".bw\") bam2bw(bam, cov_center, binWidth=1L, extend=50L, scaling=FALSE, type=\"center\") ## `paired` not specified, assuming single-end reads. Set to paired='auto' to automatically detect. ## Reading in signal... ## Writing bigwig... plotSignalTracks(list(reads=gr, \"type=full\"=cov_full_bw1,                        \"type=start\"=cov_start, \"type=center\"=cov_center),                  region=\"chr1:1:190\", extend=0)"},{"path":"https://ethz-ins.github.io/epiwraps/articles/bam2bw.html","id":"example-heatmaps-created-using-different-bigwig-generation-procedures","dir":"Articles","previous_headings":"Introduction","what":"Example heatmaps created using different bigwig generation procedures","title":"Generating bigwig tracks with bam2bw","text":"following figure, created using epiwraps (see vignette generating plots), represent chromatin accessibility (ATAC-seq) signals around bound CTCF motifs T-cells. different signals based different bigwig files derived bam file using functions described .  first heatmap (‘full coverage’) generated default parameter, fragment coverage (.e. many fragments overlap given location). second heatmap shows fragment sizes compatible mono-nucleosomes, resizing fragments centers. exact arguments used shift=c(4L,-5L), minFragLength=147, maxFragLength=230, type=\"center\", extend=10L. Using can see nucleosomes well-positioned distance CTCF binding sites, relative depletion nucleosomes bound site . third shows coverage nucleosome-free fragments, case used shift=c(4L,-5L), maxFragLength=120. indicative TF binding, indeed see enrichment center. fourth shows transposase inserted , generated shift=c(4L,-5L), binWidth=1L, maxFragLength=120, type=\"ends\". Using can see nice footprint protected transposase CTCF binding. ATAC fragment sizes convey rich information, perfect. example, regions DNA bound multiple TFs can sometimes captured longer fragments mistakenly classify mono-nucleosome containing.","code":""},{"path":"https://ethz-ins.github.io/epiwraps/articles/bam2bw.html","id":"working-with-fragment-files-as-an-input","dir":"Articles","previous_headings":"","what":"Working with fragment files as an input","title":"Generating bigwig tracks with bam2bw","text":"use fragment files (preferably tabix-indexed) rather bam files input, can still perform tasks. See ?frag2bw function information.","code":""},{"path":"https://ethz-ins.github.io/epiwraps/articles/bam2bw.html","id":"session-information","dir":"Articles","previous_headings":"","what":"Session information","title":"Generating bigwig tracks with bam2bw","text":"","code":"sessionInfo() ## R version 4.4.2 (2024-10-31) ## Platform: x86_64-pc-linux-gnu ## Running under: Ubuntu 22.04.5 LTS ##  ## Matrix products: default ## BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3  ## LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.20.so;  LAPACK version 3.10.0 ##  ## locale: ##  [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8        ##  [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8    ##  [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C           ## [10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C    ##  ## time zone: UTC ## tzcode source: system (glibc) ##  ## attached base packages: ## [1] grid      stats4    stats     graphics  grDevices utils     datasets  ## [8] methods   base      ##  ## other attached packages: ##  [1] epiwraps_0.99.100           EnrichedHeatmap_1.36.0      ##  [3] ComplexHeatmap_2.22.0       SummarizedExperiment_1.36.0 ##  [5] Biobase_2.66.0              GenomicRanges_1.58.0        ##  [7] GenomeInfoDb_1.42.1         IRanges_2.40.0              ##  [9] S4Vectors_0.44.0            BiocGenerics_0.52.0         ## [11] MatrixGenerics_1.18.0       matrixStats_1.4.1           ## [13] BiocStyle_2.34.0            ##  ## loaded via a namespace (and not attached): ##   [1] RColorBrewer_1.1-3       rstudioapi_0.17.1        jsonlite_1.8.9           ##   [4] shape_1.4.6.1            magrittr_2.0.3           GenomicFeatures_1.58.0   ##   [7] rmarkdown_2.29           GlobalOptions_0.1.2      fs_1.6.5                 ##  [10] BiocIO_1.16.0            zlibbioc_1.52.0          ragg_1.3.3               ##  [13] vctrs_0.6.5              memoise_2.0.1            Rsamtools_2.22.0         ##  [16] RCurl_1.98-1.16          base64enc_0.1-3          htmltools_0.5.8.1        ##  [19] S4Arrays_1.6.0           progress_1.2.3           curl_6.0.1               ##  [22] SparseArray_1.6.0        Formula_1.2-5            sass_0.4.9               ##  [25] bslib_0.8.0              htmlwidgets_1.6.4        desc_1.4.3               ##  [28] plyr_1.8.9               Gviz_1.50.0              httr2_1.0.7              ##  [31] cachem_1.1.0             GenomicAlignments_1.42.0 lifecycle_1.0.4          ##  [34] iterators_1.0.14         pkgconfig_2.0.3          Matrix_1.7-1             ##  [37] R6_2.5.1                 fastmap_1.2.0            GenomeInfoDbData_1.2.13  ##  [40] clue_0.3-66              digest_0.6.37            colorspace_2.1-1         ##  [43] AnnotationDbi_1.68.0     textshaping_0.4.0        Hmisc_5.2-1              ##  [46] RSQLite_2.3.9            filelock_1.0.3           fansi_1.0.6              ##  [49] httr_1.4.7               abind_1.4-8              compiler_4.4.2           ##  [52] bit64_4.5.2              doParallel_1.0.17        backports_1.5.0          ##  [55] htmlTable_2.4.3          BiocParallel_1.40.0      DBI_1.2.3                ##  [58] UpSetR_1.4.0             biomaRt_2.62.0           rappdirs_0.3.3           ##  [61] DelayedArray_0.32.0      rjson_0.2.23             tools_4.4.2              ##  [64] foreign_0.8-87           nnet_7.3-19              glue_1.8.0               ##  [67] restfulr_0.0.15          checkmate_2.3.2          cluster_2.1.6            ##  [70] generics_0.1.3           gtable_0.3.6             BSgenome_1.74.0          ##  [73] ensembldb_2.30.0         data.table_1.16.2        hms_1.1.3                ##  [76] xml2_1.3.6               utf8_1.2.4               XVector_0.46.0           ##  [79] foreach_1.5.2            pillar_1.9.0             stringr_1.5.1            ##  [82] circlize_0.4.16          dplyr_1.1.4              BiocFileCache_2.14.0     ##  [85] lattice_0.22-6           deldir_2.0-4             rtracklayer_1.66.0       ##  [88] bit_4.5.0.1              biovizBase_1.54.0        tidyselect_1.2.1         ##  [91] locfit_1.5-9.10          pbapply_1.7-2            Biostrings_2.74.0        ##  [94] knitr_1.49               gridExtra_2.3            bookdown_0.41            ##  [97] ProtGenerics_1.38.0      xfun_0.49                stringi_1.8.4            ## [100] UCSC.utils_1.2.0         lazyeval_0.2.2           yaml_2.3.10              ## [103] evaluate_1.0.1           codetools_0.2-20         interp_1.1-6             ## [106] GenomicFiles_1.42.0      tibble_3.2.1             BiocManager_1.30.25      ## [109] cli_3.6.3                rpart_4.1.23             systemfonts_1.1.0        ## [112] munsell_0.5.1            jquerylib_0.1.4          dichromat_2.0-0.1        ## [115] Rcpp_1.0.13-1            dbplyr_2.5.0             png_0.1-8                ## [118] XML_3.99-0.17            parallel_4.4.2           pkgdown_2.1.1            ## [121] ggplot2_3.5.1            blob_1.2.4               prettyunits_1.2.0        ## [124] jpeg_0.1-10              latticeExtra_0.6-30      AnnotationFilter_1.30.0  ## [127] bitops_1.0-9             viridisLite_0.4.2        VariantAnnotation_1.52.0 ## [130] scales_1.3.0             crayon_1.5.3             GetoptLong_1.0.5         ## [133] rlang_1.1.4              cowplot_1.1.3            KEGGREST_1.46.0"},{"path":[]},{"path":"https://ethz-ins.github.io/epiwraps/articles/misc.html","id":"coverage-statistics","dir":"Articles","previous_headings":"Quality control","what":"Coverage statistics","title":"Miscellaneous epiwraps functions","text":"Coverage statistics give overview reads distributed across genome (precisely, across large number random regions). getCovStats compute statistics bam bigwig files (bigwig files considerably faster, files normalized coverage/density relative). example data spans part chromosome, ’ll exclude completely empty regions using exclude parameter, normally used exclude regions likely technical artefacts (e.g. blacklisted regions).  Panel shows proportion sampled regions certain read density (relative normalized bigwig file, coverage otherwise). shows us, example, expected minority regions reads (indicating reads randomly distributed). Panel B sometimes called fingerprint plot. similarly shows us reads concentrated regions, since vast majority regions low fraction coverage high-density regions. Randomly distributed reads go along diagonal, one normally curve somewhere line lower-right corner – farther away diagonal, strongly enriched data . can done multiple files simultaneously. several files, can also use coverage random windows computer similarity (see ?plotCorFromCovStats).","code":"suppressPackageStartupMessages(library(epiwraps)) # get the path to an example bigwig file: bwf <- system.file(\"extdata/example_atac.bw\", package=\"epiwraps\") cs <- getCovStats(bwf, exclude=GRanges(\"1\", IRanges(1, 4300000))) plotCovStats(cs)"},{"path":"https://ethz-ins.github.io/epiwraps/articles/misc.html","id":"fragment-length-distributions","dir":"Articles","previous_headings":"Quality control","what":"Fragment length distributions","title":"Miscellaneous epiwraps functions","text":"Given one paired-end bam files, can extract plot fragment length distribution using:","code":"fragSizesDist(bam, what=100)"},{"path":"https://ethz-ins.github.io/epiwraps/articles/misc.html","id":"tss-enrichment","dir":"Articles","previous_headings":"Quality control","what":"TSS enrichment","title":"Miscellaneous epiwraps functions","text":"TSS enrichment can also calculated plotted using TSSenrichment function.","code":""},{"path":"https://ethz-ins.github.io/epiwraps/articles/misc.html","id":"peak-calling","dir":"Articles","previous_headings":"","what":"Peak calling","title":"Miscellaneous epiwraps functions","text":"experimental peak calling function can used, either input control local global backgrounds: Note function still heavy development, usage moment discouraged!","code":"p <- callPeaks(bam, fragLength=50)"},{"path":"https://ethz-ins.github.io/epiwraps/articles/misc.html","id":"region-overlapping","dir":"Articles","previous_headings":"","what":"Region overlapping","title":"Miscellaneous epiwraps functions","text":"GenomicRanges package offers fast powerful functions overlapping genomic regions. epiwraps includes wrappers around common tasks, calculating visualizing overlaps across multiple sets regions (see ?regionUpset, ?regionOverlaps, ?regionCAT).","code":""},{"path":"https://ethz-ins.github.io/epiwraps/articles/misc.html","id":"session-information","dir":"Articles","previous_headings":"","what":"Session information","title":"Miscellaneous epiwraps functions","text":"","code":"sessionInfo() ## R version 4.4.2 (2024-10-31) ## Platform: x86_64-pc-linux-gnu ## Running under: Ubuntu 22.04.5 LTS ##  ## Matrix products: default ## BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3  ## LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.20.so;  LAPACK version 3.10.0 ##  ## locale: ##  [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8        ##  [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8    ##  [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C           ## [10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C    ##  ## time zone: UTC ## tzcode source: system (glibc) ##  ## attached base packages: ## [1] grid      stats4    stats     graphics  grDevices utils     datasets  ## [8] methods   base      ##  ## other attached packages: ##  [1] epiwraps_0.99.100           EnrichedHeatmap_1.36.0      ##  [3] ComplexHeatmap_2.22.0       SummarizedExperiment_1.36.0 ##  [5] Biobase_2.66.0              GenomicRanges_1.58.0        ##  [7] GenomeInfoDb_1.42.1         IRanges_2.40.0              ##  [9] S4Vectors_0.44.0            BiocGenerics_0.52.0         ## [11] MatrixGenerics_1.18.0       matrixStats_1.4.1           ## [13] BiocStyle_2.34.0            ##  ## loaded via a namespace (and not attached): ##   [1] RColorBrewer_1.1-3       rstudioapi_0.17.1        jsonlite_1.8.9           ##   [4] shape_1.4.6.1            magrittr_2.0.3           GenomicFeatures_1.58.0   ##   [7] farver_2.1.2             rmarkdown_2.29           GlobalOptions_0.1.2      ##  [10] fs_1.6.5                 BiocIO_1.16.0            zlibbioc_1.52.0          ##  [13] ragg_1.3.3               vctrs_0.6.5              memoise_2.0.1            ##  [16] Rsamtools_2.22.0         RCurl_1.98-1.16          base64enc_0.1-3          ##  [19] htmltools_0.5.8.1        S4Arrays_1.6.0           progress_1.2.3           ##  [22] curl_6.0.1               SparseArray_1.6.0        Formula_1.2-5            ##  [25] sass_0.4.9               bslib_0.8.0              htmlwidgets_1.6.4        ##  [28] desc_1.4.3               plyr_1.8.9               Gviz_1.50.0              ##  [31] httr2_1.0.7              cachem_1.1.0             GenomicAlignments_1.42.0 ##  [34] lifecycle_1.0.4          iterators_1.0.14         pkgconfig_2.0.3          ##  [37] Matrix_1.7-1             R6_2.5.1                 fastmap_1.2.0            ##  [40] GenomeInfoDbData_1.2.13  clue_0.3-66              digest_0.6.37            ##  [43] colorspace_2.1-1         AnnotationDbi_1.68.0     textshaping_0.4.0        ##  [46] Hmisc_5.2-1              RSQLite_2.3.9            labeling_0.4.3           ##  [49] filelock_1.0.3           fansi_1.0.6              httr_1.4.7               ##  [52] abind_1.4-8              compiler_4.4.2           withr_3.0.2              ##  [55] bit64_4.5.2              doParallel_1.0.17        backports_1.5.0          ##  [58] htmlTable_2.4.3          BiocParallel_1.40.0      DBI_1.2.3                ##  [61] UpSetR_1.4.0             biomaRt_2.62.0           rappdirs_0.3.3           ##  [64] DelayedArray_0.32.0      rjson_0.2.23             tools_4.4.2              ##  [67] foreign_0.8-87           nnet_7.3-19              glue_1.8.0               ##  [70] restfulr_0.0.15          checkmate_2.3.2          cluster_2.1.6            ##  [73] generics_0.1.3           gtable_0.3.6             BSgenome_1.74.0          ##  [76] ensembldb_2.30.0         data.table_1.16.2        hms_1.1.3                ##  [79] xml2_1.3.6               utf8_1.2.4               XVector_0.46.0           ##  [82] foreach_1.5.2            pillar_1.9.0             stringr_1.5.1            ##  [85] circlize_0.4.16          dplyr_1.1.4              BiocFileCache_2.14.0     ##  [88] lattice_0.22-6           deldir_2.0-4             rtracklayer_1.66.0       ##  [91] bit_4.5.0.1              biovizBase_1.54.0        tidyselect_1.2.1         ##  [94] locfit_1.5-9.10          pbapply_1.7-2            Biostrings_2.74.0        ##  [97] knitr_1.49               gridExtra_2.3            bookdown_0.41            ## [100] ProtGenerics_1.38.0      xfun_0.49                stringi_1.8.4            ## [103] UCSC.utils_1.2.0         lazyeval_0.2.2           yaml_2.3.10              ## [106] evaluate_1.0.1           codetools_0.2-20         interp_1.1-6             ## [109] GenomicFiles_1.42.0      tibble_3.2.1             BiocManager_1.30.25      ## [112] cli_3.6.3                rpart_4.1.23             systemfonts_1.1.0        ## [115] munsell_0.5.1            jquerylib_0.1.4          dichromat_2.0-0.1        ## [118] Rcpp_1.0.13-1            dbplyr_2.5.0             png_0.1-8                ## [121] XML_3.99-0.17            parallel_4.4.2           pkgdown_2.1.1            ## [124] ggplot2_3.5.1            blob_1.2.4               prettyunits_1.2.0        ## [127] jpeg_0.1-10              latticeExtra_0.6-30      AnnotationFilter_1.30.0  ## [130] bitops_1.0-9             viridisLite_0.4.2        VariantAnnotation_1.52.0 ## [133] scales_1.3.0             crayon_1.5.3             GetoptLong_1.0.5         ## [136] rlang_1.1.4              cowplot_1.1.3            KEGGREST_1.46.0"},{"path":"https://ethz-ins.github.io/epiwraps/articles/multiRegionPlot.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Visualizing signals across many regions","text":"Since reading data many regions typically longer plotting , split plotting acquiring data. latter done function specific package, former wraps around EnrichedHeatmap package. interface simplified, full functionality customization recommended look EnrichedHeatmap documentation.","code":""},{"path":"https://ethz-ins.github.io/epiwraps/articles/multiRegionPlot.html","id":"reading-signal-inaround-a-set-of-regions","dir":"Articles","previous_headings":"","what":"Reading signal in/around a set of regions","title":"Visualizing signals across many regions","text":"signal2Matrix function reads genomic signals around centers set regions. can read bam BigWig files, although reading bam files considerably slower strongly recommend using bigwig files. generating bigwig files show kind signal want visualize, see vignette effect. result object class EnrichmentSE, inherits SummarizedExperiment, therefore affords manipulations latter offers. region stored row, sample signal track column object. can see signal 150 rows/regions two tracks. subset first 50 regions follows: obtain coordinates queried regions : One can obtain detailed information bins saved object: means signal track matrix 200 columns, asked extend 1000bp either side, default bin size 10bp, making 100 bins/windows side.","code":"suppressPackageStartupMessages(library(epiwraps)) # we fetch the path to the example bigwig file: bwf <- system.file(\"extdata/example_atac.bw\", package=\"epiwraps\") # we load example regions (could be a GRanges or a path to a bed-like file): regions <- system.file(\"extdata/example_peaks.bed\", package=\"epiwraps\") # we obtain the matrix of the signal around the regions. For the purpose of this # example, we'll read twice from the same: m <- signal2Matrix(c(atac1=bwf, atac2=bwf), regions, extend=1000L) ## Reading /home/runner/work/_temp/Library/epiwraps/extdata/example_atac.bw ## Reading /home/runner/work/_temp/Library/epiwraps/extdata/example_atac.bw m ## class: EnrichmentSE  ## 2 tracks across 150 regions ## assays(1): input ## rownames(150): 1:195054101-195054250 1:133522798-133523047 ... ##   1:22224734-22224983 1:90375438-90375787 ## rowData names(0): ## colnames(2): atac1 atac2 ## colData names(0): ## metadata(0): m[1:50,] ## class: EnrichmentSE  ## 2 tracks across 50 regions ## assays(1): input ## rownames(50): 1:195054101-195054250 1:133522798-133523047 ... ##   1:16142722-16143021 1:143652894-143653043 ## rowData names(0): ## colnames(2): atac1 atac2 ## colData names(0): ## metadata(0): rowRanges(m) ## GRanges object with 150 ranges and 0 metadata columns: ##                         seqnames              ranges strand ##                            <Rle>           <IRanges>  <Rle> ##   1:195054101-195054250        1 195054101-195054250      * ##   1:133522798-133523047        1 133522798-133523047      * ##   1:133522621-133522870        1 133522621-133522870      * ##   1:170892151-170892250        1 170892151-170892250      * ##   1:170897239-170897438        1 170897239-170897438      * ##                     ...      ...                 ...    ... ##   1:121131630-121131729        1 121131630-121131729      * ##   1:122700285-122700334        1 122700285-122700334      * ##   1:100107921-100108020        1 100107921-100108020      * ##     1:22224734-22224983        1   22224734-22224983      * ##     1:90375438-90375787        1   90375438-90375787      * ##   ------- ##   seqinfo: 1 sequence from an unspecified genome; no seqlengths showTrackInfo(m) ## atac1 ( 150x200 ) : ##   -1kb/+1kb (100 windows each) ##   around the centers of given regions  ## atac2 ( 150x200 ) : ##   -1kb/+1kb (100 windows each) ##   around the centers of given regions"},{"path":"https://ethz-ins.github.io/epiwraps/articles/multiRegionPlot.html","id":"extracting-and-manipulating-signal-matrices","dir":"Articles","previous_headings":"Reading signal in/around a set of regions","what":"Extracting and manipulating signal matrices","title":"Visualizing signals across many regions","text":"possible extract list signal matrix manipulations, e.g. transformation: See ?addAssayToESE adding list signal matrices (m2 ) existing EnrichmentSE object. addition, signal matrices can combined, either manually using ?mergeSignalMatrices.","code":"# square-root transform m2 <- lapply(getSignalMatrices(m), sqrt)"},{"path":"https://ethz-ins.github.io/epiwraps/articles/multiRegionPlot.html","id":"normalization","dir":"Articles","previous_headings":"Reading signal in/around a set of regions","what":"Normalization","title":"Visualizing signals across many regions","text":"default, bigwig files generated epiwraps normalized library size, always sufficient. EnrichmentSE can normalized using various methods. overview methods, see normalization vignette.","code":""},{"path":"https://ethz-ins.github.io/epiwraps/articles/multiRegionPlot.html","id":"plotting-heatmaps","dir":"Articles","previous_headings":"","what":"Plotting heatmaps","title":"Visualizing signals across many regions","text":"signal read object prepared, (eventually normalized, see section ), can plot heatmaps based follows: can use arguments supported EnrichedHeatmap (thus, extension, ComplexHeatmap), example:  often useful subset regions high enrichment, can score function:","code":"plotEnrichedHeatmaps(m) plotEnrichedHeatmaps(m, colors=c(\"white\",\"darkred\"), cluster_rows=TRUE,                      show_row_dend=TRUE, top_annotation=FALSE,                       row_title=\"My list of cool regions\") plotEnrichedHeatmaps(m[head(order(-rowMeans(score(m))),50),])"},{"path":"https://ethz-ins.github.io/epiwraps/articles/multiRegionPlot.html","id":"color-scale-trimming","dir":"Articles","previous_headings":"Plotting heatmaps","what":"Color-scale trimming","title":"Visualizing signals across many regions","text":"default, colorscale trimmed prevent driven rare extreme values. can controlled via trim argument (indicates quantile data points keep establish colorscale). Compare instance following two heatmaps:  underlying data exactly , color-mapping changes. left one, trimming, single high value top forces colorscale extend high values, even though data low range, resulting dark heatmap. one right, ’s opposite: much trimmed many points reach top colorscale, resulting ‘-exposed’ heatmap. practice, advisable use minimal trimming (e.g. default c(0.02,0.98)).","code":"plotEnrichedHeatmaps(m[,1], trim=1, scale_title=\"trim=1\", column_title=\"trim=1 (no trim)\",                      top_annotation=FALSE) +   plotEnrichedHeatmaps(m[,1], trim=0.99, scale_title=\"trim=0.99\",                        column_title=\"trim=0.99\", top_annotation=FALSE) +   plotEnrichedHeatmaps(m[,1], trim=0.9, column_title=\"trim=0.9\",                        scale_title=\"trim=0.9\", top_annotation=FALSE)"},{"path":"https://ethz-ins.github.io/epiwraps/articles/multiRegionPlot.html","id":"different-colorscales-for-different-tracks","dir":"Articles","previous_headings":"Plotting heatmaps","what":"Different colorscales for different tracks","title":"Visualizing signals across many regions","text":"also possible different colorscales different tracks, especially useful comparing different signals. illustrate , let’s load example different tracks: can put three tracks color scale:  One also specify colors separately providing list:  information can also stored object, rather specified everytime:","code":"data(exampleESE) exampleESE ## class: EnrichmentSE  ## 3 tracks across 150 regions ## assays(1): input ## rownames(150): chr1:36986026-36986320 chr1:36986855-36987064 ... ##   chr1:135509406-135510907 chr1:131525035-131527379 ## rowData names(0): ## colnames(3): H3K27ac H3K4me3 p300 ## colData names(0): ## metadata(0): plotEnrichedHeatmaps(exampleESE, multiScale=TRUE) plotEnrichedHeatmaps(exampleESE,                      colors=list(c(\"white\",\"darkblue\"), \"darkgreen\", \"darkred\")) exampleESE$hmcolors <- list(viridisLite::inferno(100),  \"darkgreen\", \"darkred\") plotEnrichedHeatmaps(exampleESE)"},{"path":"https://ethz-ins.github.io/epiwraps/articles/multiRegionPlot.html","id":"scaled-regions","dir":"Articles","previous_headings":"Plotting heatmaps","what":"Scaled regions","title":"Visualizing signals across many regions","text":"default, signal2Matrix looks pre-defined interval (defined extend argument) around center provided regions. means width input regions ignored. circumstances, however, can useful scale regions width, can done using type=\"scaled\" argument. Consider following example:  purposes, plotting signal transcripts, can useful target region consist multiple regions (e.g. exons) stitched together. can done supplying GRangesList regions:","code":"ese <- cbind(   signal2Matrix(c(center=bwf), regions, extend=1000L),   signal2Matrix(c(scaled=bwf), regions, extend=1000L, type=\"scaled\") ) ## Reading /home/runner/work/_temp/Library/epiwraps/extdata/example_atac.bw ## Reading /home/runner/work/_temp/Library/epiwraps/extdata/example_atac.bw plotEnrichedHeatmaps(ese) # we make a dummy GRangesList: a <- sort(rtracklayer::import(regions)) dummy.grl <- GRangesList(split(a, rep(LETTERS[1:15],each=10))) sm <- signal2Matrix(c(scaled=bwf), dummy.grl, extend=1000L, type=\"scaled\") ## Reading /home/runner/work/_temp/Library/epiwraps/extdata/example_atac.bw plotEnrichedHeatmaps(sm)"},{"path":"https://ethz-ins.github.io/epiwraps/articles/multiRegionPlot.html","id":"heatmap-rasterization","dir":"Articles","previous_headings":"Plotting heatmaps","what":"Heatmap rasterization","title":"Visualizing signals across many regions","text":"plotting regions pixels available, several regions summarized one pixel, generating heatmap makes plot much less heavy. default, EnrichedHeatmap performs rasterization using magick package installed, falls back suboptimal method . therefore recommended install magick package. Depending settings, heatmap big might hit preset limits ‘magick’ base rasterization, result error ‘Image must least 1 frame write bitmap’. cases, might degrade lower-quality rasterization using additional arguments raster_by_magick=FALSE, raster_device=\"CairoJPEG\". Finally, systems, rasterization sometimes encounters ‘UnableToOpenBlob’ error. moment, workaround disable rasterization using use_raster=FALSE.","code":""},{"path":"https://ethz-ins.github.io/epiwraps/articles/multiRegionPlot.html","id":"sorting-and-clustering","dir":"Articles","previous_headings":"","what":"Sorting and clustering","title":"Visualizing signals across many regions","text":"traditional ranking decreasing overall enrichment can easily hide patterns data, instead revealed clustering. One approach use hierarchical clustering rows:  example, already reveals important patterns data, namely fact p300 binding associated H3K27ac tends mutually exclusive promoter-associated H3K4me3 mark. hierarchical clustering based whole enrichment profile, can easily led astray patterns individual signals, seldom provides good results practice. alternative use enrichment score weighted distance center, eventually row-normalized, cluster regions. provide function end:  Note splitting 3 clusters, can also provide range values (e.g. k=2:8) function also return cluster quality metrics . Users can course use algorithms cluster regions. end, can useful summarize region sample using single score weights signal according distance center target (see ?EnrichedHeatmap::enriched_score). can done default assay score method:","code":"plotEnrichedHeatmaps(exampleESE, cluster_rows=TRUE) # we cluster the regions using 2 clusters, and store the cluster labels in the  # rowData of the object:  rowData(exampleESE)$cluster <- clusterSignalMatrices(exampleESE, k=2, scaleRows=TRUE) ##   ~95% of the variance explained by clusters # we additionally label the clusters with colors: plotEnrichedHeatmaps(exampleESE, row_split=\"cluster\",                      mean_color=c(\"1\"=\"red\", \"2\"=\"blue\")) head(score(exampleESE)) ##                           H3K27ac   H3K4me3     p300 ## chr1:36986026-36986320   39609.53   341.850 27443.12 ## chr1:36986855-36987064   48642.90   230.900 21184.08 ## chr1:36061123-36061559   26838.05   313.025 20699.60 ## chr1:36060725-36060951   34205.22   330.125 20061.05 ## chr1:180888607-180889217 20013.45  2019.725 22293.35 ## chr1:86487735-86488859   20008.00 26012.825  1265.85"},{"path":"https://ethz-ins.github.io/epiwraps/articles/multiRegionPlot.html","id":"plotting-aggregated-signals","dir":"Articles","previous_headings":"","what":"Plotting aggregated signals","title":"Visualizing signals across many regions","text":"also possible plot average signals across regions. , first melt signal matrices use ggplot2. meltSignals function return data.frame showing mean, standard deviation, standard error median position relative center, sample/matrix: can used plotting, simply ggplot:  also include cluster information:","code":"d <- meltSignals(exampleESE) head(d) ##   position  sample     mean       SD       SE median ## 1    -2000 H3K27ac 83.28000 182.5112 14.90197   11.5 ## 2    -1950 H3K27ac 85.87333 189.9628 15.51040   11.5 ## 3    -1900 H3K27ac 91.19333 207.2911 16.92525    9.0 ## 4    -1850 H3K27ac 90.92000 201.2272 16.43013    8.5 ## 5    -1800 H3K27ac 88.02667 192.6586 15.73051   10.0 ## 6    -1750 H3K27ac 85.52000 173.5301 14.16867   14.5 library(ggplot2) ggplot(d, aes(position, mean, colour=sample)) +   geom_vline(xintercept=0, linetype=\"dashed\") +   geom_ribbon(aes(position, ymin=mean-SE, ymax=mean+SE, fill=sample), alpha=0.4, colour=NA) +    geom_line(linewidth=1.2) +    theme_bw() + labs(x=\"relative position\", y=\"mean RPKM\") d <- meltSignals(exampleESE, splitBy = \"cluster\") ggplot(d, aes(position, mean, colour=sample)) +   geom_vline(xintercept=0, linetype=\"dashed\") +   geom_ribbon(aes(position, ymin=mean-SE, ymax=mean+SE, fill=sample), alpha=0.4, colour=NA) +    geom_line(linewidth=1.2) + facet_wrap(~split) +   theme_bw() + labs(x=\"relative position\", y=\"mean RPKM\")"},{"path":"https://ethz-ins.github.io/epiwraps/articles/multiRegionPlot.html","id":"visualizing-dname-and-sparse-signals","dir":"Articles","previous_headings":"","what":"Visualizing DNAme and sparse signals","title":"Visualizing signals across many regions","text":"Nucleotide-resolution DNA methylation (obtained bisulfite sequencing) signal differs signals used throughout vignette continuous across genome, specifically C CpG nucleotides variable density throughout genome. consequence, likely plotting bins contain CpG, case get assigned value 0, even though completely methylated region. reason, advisable smooth DNA methylation signals purpose visualization. example, let’s look gene bodies active genes chr8 A549 cell lines: typical DNAme data, object GRanges object (specifically GPos object, since ranges width 1 nucleotide) , score column, percentage DNA methylation. Let’s see happens plot heatmap signal, without smoothing.  use type=\"scaled\" scale gene bodies size, since can different sizes. first heatmap default (smoothing), center one uses smoothing (note cap values 0 100 avoid smoothing artefacts). third doesn’t use smoothing, display values bins contain CpG. heatmaps show clear absence DNA methylation promoter genes (upstream TSS) predominantly methylated gene bodies. However disagree substantially methylation levels upstream promoter downstream transcription end sites (TES). density regions (covered) CpG nucleotides. Since genes rather long, bins gene body heatmap contain CpG, leading actual methylation signal. flanking regions, however, necessarily case, left heatmap distinguish bins unmethylated form bins information. right heatmap, can see regions downstream TES CpG-depleted. Instead, smoothed heatmap (center) uses neighborhing bins estimate methylation status bin, effectively filling gaps. provides truthful representation, .e. regions downstream genes upstream promoters , time, methylated gene bodies. Smoothing performed EnrichedHeatmap; see ?EnrichedHeatmap::normalizeToMatrix information/customization.","code":"data(\"exampleDNAme\") head(exampleDNAme) ## UnstitchedGPos object with 6 positions and 1 metadata column: ##       seqnames       pos strand |     score ##          <Rle> <integer>  <Rle> | <integer> ##   [1]     chr9   4791172      + |        96 ##   [2]     chr9   4791391      + |        96 ##   [3]     chr9   4791398      + |       100 ##   [4]     chr9   4791422      + |        92 ##   [5]     chr9   4791437      + |        82 ##   [6]     chr9   4791627      + |        93 ##   ------- ##   seqinfo: 5 sequences from an unspecified genome; no seqlengths o1 <- signal2Matrix(list(noSmooth=exampleDNAme), geneBodies, type=\"scaled\") ## Computing signal from GRanges 'noSmooth'... o2 <- signal2Matrix(list(smoothed=exampleDNAme), geneBodies, type=\"scaled\",                      smooth=TRUE, limit=c(0,100)) # recommended for DNAme ## Computing signal from GRanges 'smoothed'... # we add a third one to visualize the CpGs: o3 <- signal2Matrix(list(\"noSmooth only CpGs\"=exampleDNAme), geneBodies, type=\"scaled\", background=NA) ## Computing signal from GRanges 'noSmooth only CpGs'... o <- cbind(o1,o2,o3) plotEnrichedHeatmaps(o, scale_title=\"%\\nmethylation\", axis_name=c(\"TSS\",\"TES\"))"},{"path":"https://ethz-ins.github.io/epiwraps/articles/multiRegionPlot.html","id":"session-information","dir":"Articles","previous_headings":"","what":"Session information","title":"Visualizing signals across many regions","text":"","code":"sessionInfo() ## R version 4.4.2 (2024-10-31) ## Platform: x86_64-pc-linux-gnu ## Running under: Ubuntu 22.04.5 LTS ##  ## Matrix products: default ## BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3  ## LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.20.so;  LAPACK version 3.10.0 ##  ## locale: ##  [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8        ##  [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8    ##  [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C           ## [10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C    ##  ## time zone: UTC ## tzcode source: system (glibc) ##  ## attached base packages: ## [1] grid      stats4    stats     graphics  grDevices utils     datasets  ## [8] methods   base      ##  ## other attached packages: ##  [1] ggplot2_3.5.1               epiwraps_0.99.100           ##  [3] EnrichedHeatmap_1.36.0      ComplexHeatmap_2.22.0       ##  [5] SummarizedExperiment_1.36.0 Biobase_2.66.0              ##  [7] GenomicRanges_1.58.0        GenomeInfoDb_1.42.1         ##  [9] IRanges_2.40.0              S4Vectors_0.44.0            ## [11] BiocGenerics_0.52.0         MatrixGenerics_1.18.0       ## [13] matrixStats_1.4.1           BiocStyle_2.34.0            ##  ## loaded via a namespace (and not attached): ##   [1] RColorBrewer_1.1-3       rstudioapi_0.17.1        jsonlite_1.8.9           ##   [4] shape_1.4.6.1            magrittr_2.0.3           magick_2.8.5             ##   [7] GenomicFeatures_1.58.0   farver_2.1.2             rmarkdown_2.29           ##  [10] GlobalOptions_0.1.2      fs_1.6.5                 BiocIO_1.16.0            ##  [13] zlibbioc_1.52.0          ragg_1.3.3               vctrs_0.6.5              ##  [16] memoise_2.0.1            Rsamtools_2.22.0         RCurl_1.98-1.16          ##  [19] base64enc_0.1-3          htmltools_0.5.8.1        S4Arrays_1.6.0           ##  [22] progress_1.2.3           curl_6.0.1               SparseArray_1.6.0        ##  [25] Formula_1.2-5            sass_0.4.9               bslib_0.8.0              ##  [28] htmlwidgets_1.6.4        desc_1.4.3               plyr_1.8.9               ##  [31] Gviz_1.50.0              httr2_1.0.7              cachem_1.1.0             ##  [34] GenomicAlignments_1.42.0 lifecycle_1.0.4          iterators_1.0.14         ##  [37] pkgconfig_2.0.3          Matrix_1.7-1             R6_2.5.1                 ##  [40] fastmap_1.2.0            GenomeInfoDbData_1.2.13  clue_0.3-66              ##  [43] digest_0.6.37            colorspace_2.1-1         AnnotationDbi_1.68.0     ##  [46] textshaping_0.4.0        Hmisc_5.2-1              RSQLite_2.3.9            ##  [49] labeling_0.4.3           filelock_1.0.3           fansi_1.0.6              ##  [52] httr_1.4.7               abind_1.4-8              compiler_4.4.2           ##  [55] withr_3.0.2              bit64_4.5.2              doParallel_1.0.17        ##  [58] backports_1.5.0          htmlTable_2.4.3          BiocParallel_1.40.0      ##  [61] DBI_1.2.3                UpSetR_1.4.0             biomaRt_2.62.0           ##  [64] rappdirs_0.3.3           DelayedArray_0.32.0      rjson_0.2.23             ##  [67] tools_4.4.2              foreign_0.8-87           nnet_7.3-19              ##  [70] glue_1.8.0               restfulr_0.0.15          checkmate_2.3.2          ##  [73] cluster_2.1.6            generics_0.1.3           gtable_0.3.6             ##  [76] BSgenome_1.74.0          ensembldb_2.30.0         data.table_1.16.2        ##  [79] hms_1.1.3                xml2_1.3.6               utf8_1.2.4               ##  [82] XVector_0.46.0           foreach_1.5.2            pillar_1.9.0             ##  [85] stringr_1.5.1            circlize_0.4.16          dplyr_1.1.4              ##  [88] BiocFileCache_2.14.0     lattice_0.22-6           deldir_2.0-4             ##  [91] rtracklayer_1.66.0       bit_4.5.0.1              biovizBase_1.54.0        ##  [94] tidyselect_1.2.1         locfit_1.5-9.10          pbapply_1.7-2            ##  [97] Biostrings_2.74.0        knitr_1.49               gridExtra_2.3            ## [100] bookdown_0.41            ProtGenerics_1.38.0      xfun_0.49                ## [103] stringi_1.8.4            UCSC.utils_1.2.0         lazyeval_0.2.2           ## [106] yaml_2.3.10              evaluate_1.0.1           codetools_0.2-20         ## [109] interp_1.1-6             GenomicFiles_1.42.0      tibble_3.2.1             ## [112] BiocManager_1.30.25      cli_3.6.3                rpart_4.1.23             ## [115] systemfonts_1.1.0        munsell_0.5.1            jquerylib_0.1.4          ## [118] dichromat_2.0-0.1        Rcpp_1.0.13-1            dbplyr_2.5.0             ## [121] png_0.1-8                XML_3.99-0.17            parallel_4.4.2           ## [124] pkgdown_2.1.1            blob_1.2.4               prettyunits_1.2.0        ## [127] jpeg_0.1-10              latticeExtra_0.6-30      AnnotationFilter_1.30.0  ## [130] bitops_1.0-9             viridisLite_0.4.2        VariantAnnotation_1.52.0 ## [133] scales_1.3.0             crayon_1.5.3             GetoptLong_1.0.5         ## [136] rlang_1.1.4              cowplot_1.1.3            KEGGREST_1.46.0"},{"path":"https://ethz-ins.github.io/epiwraps/articles/normalization.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Normalizing genomic signals","text":"epiwraps includes two ways calculating normalization factors: either signal files (e.g. bam bigwig files), robust way enables options, EnrichmentSE object (see multiRegionPlot vignette intro object) signal matrices. cases, logic : estimate normalization factors (mostly single linear scaling factors, although methods involve complex normalization), apply signals extracted using signal2Matrix().","code":""},{"path":"https://ethz-ins.github.io/epiwraps/articles/normalization.html","id":"applying-normalization-factors-when-generating-the-bigwig-files","dir":"Articles","previous_headings":"Introduction","what":"Applying normalization factors when generating the bigwig files","title":"Normalizing genomic signals","text":"possible also directly use computed normalization factors creating bigwig files. default, bam2bw() function scales using library size, can disabled using scaling=FALSE. However, also possible pass scaling argument manual scaling factor, computed functions described . vignette, however, focus normalizing signal matrices.","code":""},{"path":"https://ethz-ins.github.io/epiwraps/articles/normalization.html","id":"obtaining-normalization-factors-for-a-set-of-signal-files","dir":"Articles","previous_headings":"","what":"Obtaining normalization factors for a set of signal files","title":"Normalizing genomic signals","text":"getNormFactors() function can used estimate normalization factors either bam bigwig files. files mixed (bam/bigwig), however, important note normalization factors calculated bam files applied data extracted bigwig files, vice versa, bigwig files default already normalized library size. needed, however, getNormFactors() can used apply method kind files.","code":""},{"path":"https://ethz-ins.github.io/epiwraps/articles/normalization.html","id":"normalization-methods","dir":"Articles","previous_headings":"Obtaining normalization factors for a set of signal files","what":"Normalization methods","title":"Normalizing genomic signals","text":"Simple library size normalization, done bam2bw(), always appropriate. main reasons 1) different samples/experiments can different signal--noise ratio, result sequencing needed obtain similar coverage enriched region; 2) might global differences amount signal interest (e.g. less binding, globally, one cell type vs another); 3) might differences technical biases, GC content. reasons, different normalization methods needed according circumstances assumptions seem reasonable. overview normalization methods currently implemented epiwraps via getNormFactors() function: ‘background’ ‘SES’ normalization method (synonyms ) assumes background noise average across experiments (Diaz et al., Stat Appl Gen et Mol Biol, 2012), assumption works well practice robust global differences amount signal large differences signal--noise ratio. ‘MAnorm’ approach ( Shao et al., Genome Biology 2012) assumes regions commonly enriched (.e.  common peaks) two experiments average signal two experiments. ‘enriched’ approach assumes enriched regions average similarly enriched across samples. Contrarily ‘MAnorm’, regions need common across samples/experiments. robust global differences. ‘top’ approach assumes maximum enrichment (trimming) peaks across samples/experiments. ‘S3norm’ (Xiang et al., NAR 2020) ‘2cLinear’ methods try normalize enrichment background simultaneously. S3norm log-linear fashion (publication), ‘2cLinear’ original scale. normalization factors can computed using getNormFactors() : case, since files identical, factors 1. normalization methods addtionally require peaks input, e.g.: (Note MAnorm normally require list peaks sample/experiment). computed, normalization factors can applied EnrichmentSE object: object now new assay, called normalized, put front therefore used downstream usages unless uses specifies otherwise. Note downstream function however possible specify assay use via assay argument.","code":"suppressPackageStartupMessages(library(epiwraps)) # we fetch the path to the example bigwig file: bwf <- system.file(\"extdata/example_atac.bw\", package=\"epiwraps\") # we'll just double it to create a fake multi-sample dataset: bwfiles <- c(atac1=bwf, atac2=bwf) nf <- getNormFactors(bwfiles, method=\"background\") ## Comparing coverage in random regions... nf ## atac1 atac2  ##     1     1 peaks <- system.file(\"extdata/example_peaks.bed\", package=\"epiwraps\") nf <- getNormFactors(bwfiles, peaks = peaks, method=\"MAnorm\") ## Comparing coverage in peaks... sm <- signal2Matrix(bwfiles, peaks, extend=1000L) ## Reading /home/runner/work/_temp/Library/epiwraps/extdata/example_atac.bw ## Reading /home/runner/work/_temp/Library/epiwraps/extdata/example_atac.bw sm <- renormalizeSignalMatrices(sm, scaleFactors=nf) sm ## class: EnrichmentSE  ## 2 tracks across 150 regions ## assays(2): normalized input ## rownames(150): 1:195054101-195054250 1:133522798-133523047 ... ##   1:22224734-22224983 1:90375438-90375787 ## rowData names(0): ## colnames(2): atac1 atac2 ## colData names(0): ## metadata(0):"},{"path":"https://ethz-ins.github.io/epiwraps/articles/normalization.html","id":"obtaining-normalization-factors-from-the-signal-matrices-themselves","dir":"Articles","previous_headings":"","what":"Obtaining normalization factors from the signal matrices themselves","title":"Normalizing genomic signals","text":"also possible normalize signal matrices using factors derived matrices , using renormalizeSignalMatrices function. Note provided ‘quick--dirty’ approach robustness proper estimation methods. Specifically, beyond providing manual scaling factors (e.g. computed using getNormFactors), function includes two methods : method=\"border\" works assumption left/right borders matrices represent background signal equal across samples. , can seen approximation aforementioned background normalization. However, work 1) left/right borders matrices sufficiently far signal (e.g. peaks) chiefly noise, (main background normalization method ) 2) signal--noise ratio comparable across tracks/samples. method=\"top\" instead works assumption highest signal (eventual trimming extremes) across tracks/samples. illustrate , first introduce difference two tracks using arbitrary factors:  can normalize:  ’ve recovered comparable signal across two tracks/samples.","code":"sm <- renormalizeSignalMatrices(sm, scaleFactors=c(1,4), toAssay=\"test\") plotEnrichedHeatmaps(sm, assay = \"test\") sm <- renormalizeSignalMatrices(sm, method=\"top\", fromAssay=\"test\") # again this adds an assay to the object, which will be automatically used when plotting: plotEnrichedHeatmaps(sm) ## Using assay topNormalized"},{"path":"https://ethz-ins.github.io/epiwraps/articles/normalization.html","id":"session-information","dir":"Articles","previous_headings":"","what":"Session information","title":"Normalizing genomic signals","text":"","code":"sessionInfo() ## R version 4.4.2 (2024-10-31) ## Platform: x86_64-pc-linux-gnu ## Running under: Ubuntu 22.04.5 LTS ##  ## Matrix products: default ## BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3  ## LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.20.so;  LAPACK version 3.10.0 ##  ## locale: ##  [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8        ##  [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8    ##  [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C           ## [10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C    ##  ## time zone: UTC ## tzcode source: system (glibc) ##  ## attached base packages: ## [1] grid      stats4    stats     graphics  grDevices utils     datasets  ## [8] methods   base      ##  ## other attached packages: ##  [1] epiwraps_0.99.100           EnrichedHeatmap_1.36.0      ##  [3] ComplexHeatmap_2.22.0       SummarizedExperiment_1.36.0 ##  [5] Biobase_2.66.0              GenomicRanges_1.58.0        ##  [7] GenomeInfoDb_1.42.1         IRanges_2.40.0              ##  [9] S4Vectors_0.44.0            BiocGenerics_0.52.0         ## [11] MatrixGenerics_1.18.0       matrixStats_1.4.1           ## [13] BiocStyle_2.34.0            ##  ## loaded via a namespace (and not attached): ##   [1] RColorBrewer_1.1-3       rstudioapi_0.17.1        jsonlite_1.8.9           ##   [4] shape_1.4.6.1            magrittr_2.0.3           magick_2.8.5             ##   [7] GenomicFeatures_1.58.0   rmarkdown_2.29           GlobalOptions_0.1.2      ##  [10] fs_1.6.5                 BiocIO_1.16.0            zlibbioc_1.52.0          ##  [13] ragg_1.3.3               vctrs_0.6.5              memoise_2.0.1            ##  [16] Rsamtools_2.22.0         RCurl_1.98-1.16          base64enc_0.1-3          ##  [19] htmltools_0.5.8.1        S4Arrays_1.6.0           progress_1.2.3           ##  [22] curl_6.0.1               SparseArray_1.6.0        Formula_1.2-5            ##  [25] sass_0.4.9               bslib_0.8.0              htmlwidgets_1.6.4        ##  [28] desc_1.4.3               plyr_1.8.9               Gviz_1.50.0              ##  [31] httr2_1.0.7              cachem_1.1.0             GenomicAlignments_1.42.0 ##  [34] lifecycle_1.0.4          iterators_1.0.14         pkgconfig_2.0.3          ##  [37] Matrix_1.7-1             R6_2.5.1                 fastmap_1.2.0            ##  [40] GenomeInfoDbData_1.2.13  clue_0.3-66              digest_0.6.37            ##  [43] colorspace_2.1-1         AnnotationDbi_1.68.0     textshaping_0.4.0        ##  [46] Hmisc_5.2-1              RSQLite_2.3.9            filelock_1.0.3           ##  [49] fansi_1.0.6              httr_1.4.7               abind_1.4-8              ##  [52] compiler_4.4.2           bit64_4.5.2              doParallel_1.0.17        ##  [55] backports_1.5.0          htmlTable_2.4.3          BiocParallel_1.40.0      ##  [58] DBI_1.2.3                UpSetR_1.4.0             biomaRt_2.62.0           ##  [61] rappdirs_0.3.3           DelayedArray_0.32.0      rjson_0.2.23             ##  [64] tools_4.4.2              foreign_0.8-87           nnet_7.3-19              ##  [67] glue_1.8.0               restfulr_0.0.15          checkmate_2.3.2          ##  [70] cluster_2.1.6            generics_0.1.3           gtable_0.3.6             ##  [73] BSgenome_1.74.0          ensembldb_2.30.0         data.table_1.16.2        ##  [76] hms_1.1.3                xml2_1.3.6               utf8_1.2.4               ##  [79] XVector_0.46.0           foreach_1.5.2            pillar_1.9.0             ##  [82] stringr_1.5.1            limma_3.62.1             circlize_0.4.16          ##  [85] dplyr_1.1.4              BiocFileCache_2.14.0     lattice_0.22-6           ##  [88] deldir_2.0-4             rtracklayer_1.66.0       bit_4.5.0.1              ##  [91] biovizBase_1.54.0        tidyselect_1.2.1         locfit_1.5-9.10          ##  [94] pbapply_1.7-2            Biostrings_2.74.0        knitr_1.49               ##  [97] gridExtra_2.3            bookdown_0.41            ProtGenerics_1.38.0      ## [100] edgeR_4.4.1              xfun_0.49                statmod_1.5.0            ## [103] stringi_1.8.4            UCSC.utils_1.2.0         lazyeval_0.2.2           ## [106] yaml_2.3.10              evaluate_1.0.1           codetools_0.2-20         ## [109] interp_1.1-6             GenomicFiles_1.42.0      tibble_3.2.1             ## [112] BiocManager_1.30.25      cli_3.6.3                rpart_4.1.23             ## [115] systemfonts_1.1.0        munsell_0.5.1            jquerylib_0.1.4          ## [118] dichromat_2.0-0.1        Rcpp_1.0.13-1            dbplyr_2.5.0             ## [121] png_0.1-8                XML_3.99-0.17            parallel_4.4.2           ## [124] pkgdown_2.1.1            ggplot2_3.5.1            blob_1.2.4               ## [127] prettyunits_1.2.0        jpeg_0.1-10              latticeExtra_0.6-30      ## [130] AnnotationFilter_1.30.0  bitops_1.0-9             viridisLite_0.4.2        ## [133] VariantAnnotation_1.52.0 scales_1.3.0             crayon_1.5.3             ## [136] GetoptLong_1.0.5         rlang_1.1.4              cowplot_1.1.3            ## [139] KEGGREST_1.46.0"},{"path":"https://ethz-ins.github.io/epiwraps/articles/singleRegionPlot.html","id":"plotting-signals-in-a-region","dir":"Articles","previous_headings":"","what":"Plotting signals in a region","title":"Visualizing signals in a single region","text":"plotSignalTracks function wrapper around Gviz package, plots one signals along genomic coordinates (genome-browser like fashion). function lacks full flexibility Gviz package, presents considerable simpler interface, automatic default parameters, etc. two essential arguments: (named) list files whose signal display (can mixture bigwig, bam, bed-like files), region display signals (can given GRanges string). function automatically determines relevant track type setting file types.   GRanges objects can also plotted annotation tracks alongside data:  Colors, track display types, parameters can either set tracks individual track, example:  bam files, can also plot individual reads:","code":"suppressPackageStartupMessages(library(epiwraps))  # get the path to an example bigwig file: bwf1 <- system.file(\"extdata/example_rna.bw\", package=\"epiwraps\") plotSignalTracks(list(RNA=bwf1), region=\"8:22165140-22212326\", genomeAxis=TRUE) # we could plot multiple tracks as follows: plotSignalTracks(list(track1=bwf1, track2=bwf1), region=\"8:22165140-22212326\") myregions <- GRanges(\"8\", IRanges(c(22166000,22202300), width=3000)) plotSignalTracks(list(RNA=bwf1, regions=myregions), region=\"8:22165140-22212326\") myregions <- GRanges(\"8\", IRanges(c(22166000,22202300), width=3000)) plotSignalTracks(list(RNA=bwf1, regions=myregions), colors=c(\"red\", \"black\"),                  region=\"8:22165140-22212326\") # we fetch an example bam file: bam <- system.file(\"extdata\", \"ex1.bam\", package=\"Rsamtools\") plotSignalTracks(c(\"my bam file\"=bam), \"seq1:1-1500\", type=\"alignments\")"},{"path":"https://ethz-ins.github.io/epiwraps/articles/singleRegionPlot.html","id":"merging-signal-from-different-tracks","dir":"Articles","previous_headings":"Plotting signals in a region","what":"Merging signal from different tracks","title":"Visualizing signals in a single region","text":"addition displayed one , data tracks can combined different ways. , tracks can simply given nested fashion: example always using track, first element (‘track1’) plots track alone, second (‘combined’) merges two given tracks. default, mean shown, can controlled aggregation argument. addition usual operations, tracks can overlayed top one another (aggregation='overlay'), shown heatmap (aggregation='heatmap').","code":"plotSignalTracks(list(track1=bwf1, combined=c(bwf1,bwf1)),                  region=\"8:22165140-22212326\")"},{"path":"https://ethz-ins.github.io/epiwraps/articles/singleRegionPlot.html","id":"using-an-ensdb-object","dir":"Articles","previous_headings":"Plotting signals in a region","what":"Using an EnsDb object","title":"Visualizing signals in a single region","text":"EnsDb object available (see ensembldb package description class methods, AnnotationHub package convenient way fetching annotation objects), two additional options available: first, instead specifying region coordinates, one can specify gene transcript name, corresponding region fetched. addition, genes transcripts can displayed. example:  Now can see coverage nicely restricted exons, transcripts/exons expressed highly others. transcripts also collapsed gene model using transcripts=\"collapsed\" (default). display gene track, first argument can simply omitted.","code":"# we fetch the GRCh38 Ensembl 103 annotation (this is not run in the vignette, # as it takes some time to download the annotation the first time is used): library(AnnotationHub) ah <- AnnotationHub() ensdb <- ah[[\"AH89426\"]] # we plot our previous RNA bigwig file, around the BMP1 locus: plotSignalTracks(c(coverage=bwf1), region=\"BMP1\", ensdb=ensdb,                   transcripts=\"full\")"},{"path":"https://ethz-ins.github.io/epiwraps/articles/singleRegionPlot.html","id":"further-track-customization","dir":"Articles","previous_headings":"Plotting signals in a region","what":"Further track customization","title":"Visualizing signals in a single region","text":"addition colors type argument (number others), can customize appearance tracks, additional parameters supported respective Gviz function can passed genes.params (Gviz’s GeneRegionTrack), align.params (Gviz’s AlignmentsTrack, plotting individual reads), tracks.params (Gviz DataTrack). example, wish manually set y-axis range data tracks, can done :  Also, addition passing filepaths GRanges, Gviz track(s) can passed (.e. objects inheriting GdObject class) can passed, enabling full track customization needed.","code":"plotSignalTracks(list(track1=bwf1, track2=bwf1), region=\"8:22165140-22212326\",                  tracks.params=list(ylim=c(0,200)))"},{"path":"https://ethz-ins.github.io/epiwraps/articles/singleRegionPlot.html","id":"session-info","dir":"Articles","previous_headings":"","what":"Session info","title":"Visualizing signals in a single region","text":"","code":"sessionInfo() ## R version 4.4.2 (2024-10-31) ## Platform: x86_64-pc-linux-gnu ## Running under: Ubuntu 22.04.5 LTS ##  ## Matrix products: default ## BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3  ## LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.20.so;  LAPACK version 3.10.0 ##  ## locale: ##  [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8        ##  [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8    ##  [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C           ## [10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C    ##  ## time zone: UTC ## tzcode source: system (glibc) ##  ## attached base packages: ## [1] grid      stats4    stats     graphics  grDevices utils     datasets  ## [8] methods   base      ##  ## other attached packages: ##  [1] epiwraps_0.99.100           EnrichedHeatmap_1.36.0      ##  [3] ComplexHeatmap_2.22.0       SummarizedExperiment_1.36.0 ##  [5] Biobase_2.66.0              GenomicRanges_1.58.0        ##  [7] GenomeInfoDb_1.42.1         IRanges_2.40.0              ##  [9] S4Vectors_0.44.0            BiocGenerics_0.52.0         ## [11] MatrixGenerics_1.18.0       matrixStats_1.4.1           ## [13] BiocStyle_2.34.0            ##  ## loaded via a namespace (and not attached): ##   [1] RColorBrewer_1.1-3       rstudioapi_0.17.1        jsonlite_1.8.9           ##   [4] shape_1.4.6.1            magrittr_2.0.3           GenomicFeatures_1.58.0   ##   [7] rmarkdown_2.29           GlobalOptions_0.1.2      fs_1.6.5                 ##  [10] BiocIO_1.16.0            zlibbioc_1.52.0          ragg_1.3.3               ##  [13] vctrs_0.6.5              memoise_2.0.1            Rsamtools_2.22.0         ##  [16] RCurl_1.98-1.16          base64enc_0.1-3          htmltools_0.5.8.1        ##  [19] S4Arrays_1.6.0           progress_1.2.3           curl_6.0.1               ##  [22] SparseArray_1.6.0        Formula_1.2-5            sass_0.4.9               ##  [25] bslib_0.8.0              htmlwidgets_1.6.4        desc_1.4.3               ##  [28] plyr_1.8.9               Gviz_1.50.0              httr2_1.0.7              ##  [31] cachem_1.1.0             GenomicAlignments_1.42.0 lifecycle_1.0.4          ##  [34] iterators_1.0.14         pkgconfig_2.0.3          Matrix_1.7-1             ##  [37] R6_2.5.1                 fastmap_1.2.0            GenomeInfoDbData_1.2.13  ##  [40] clue_0.3-66              digest_0.6.37            colorspace_2.1-1         ##  [43] AnnotationDbi_1.68.0     textshaping_0.4.0        Hmisc_5.2-1              ##  [46] RSQLite_2.3.9            filelock_1.0.3           fansi_1.0.6              ##  [49] httr_1.4.7               abind_1.4-8              compiler_4.4.2           ##  [52] bit64_4.5.2              doParallel_1.0.17        backports_1.5.0          ##  [55] htmlTable_2.4.3          BiocParallel_1.40.0      DBI_1.2.3                ##  [58] UpSetR_1.4.0             biomaRt_2.62.0           rappdirs_0.3.3           ##  [61] DelayedArray_0.32.0      rjson_0.2.23             tools_4.4.2              ##  [64] foreign_0.8-87           nnet_7.3-19              glue_1.8.0               ##  [67] restfulr_0.0.15          checkmate_2.3.2          cluster_2.1.6            ##  [70] generics_0.1.3           gtable_0.3.6             BSgenome_1.74.0          ##  [73] ensembldb_2.30.0         data.table_1.16.2        hms_1.1.3                ##  [76] xml2_1.3.6               utf8_1.2.4               XVector_0.46.0           ##  [79] foreach_1.5.2            pillar_1.9.0             stringr_1.5.1            ##  [82] circlize_0.4.16          dplyr_1.1.4              BiocFileCache_2.14.0     ##  [85] lattice_0.22-6           deldir_2.0-4             rtracklayer_1.66.0       ##  [88] bit_4.5.0.1              biovizBase_1.54.0        tidyselect_1.2.1         ##  [91] locfit_1.5-9.10          pbapply_1.7-2            Biostrings_2.74.0        ##  [94] knitr_1.49               gridExtra_2.3            bookdown_0.41            ##  [97] ProtGenerics_1.38.0      xfun_0.49                stringi_1.8.4            ## [100] UCSC.utils_1.2.0         lazyeval_0.2.2           yaml_2.3.10              ## [103] evaluate_1.0.1           codetools_0.2-20         interp_1.1-6             ## [106] GenomicFiles_1.42.0      tibble_3.2.1             BiocManager_1.30.25      ## [109] cli_3.6.3                rpart_4.1.23             systemfonts_1.1.0        ## [112] munsell_0.5.1            jquerylib_0.1.4          dichromat_2.0-0.1        ## [115] Rcpp_1.0.13-1            dbplyr_2.5.0             png_0.1-8                ## [118] XML_3.99-0.17            parallel_4.4.2           pkgdown_2.1.1            ## [121] ggplot2_3.5.1            blob_1.2.4               prettyunits_1.2.0        ## [124] jpeg_0.1-10              latticeExtra_0.6-30      AnnotationFilter_1.30.0  ## [127] bitops_1.0-9             viridisLite_0.4.2        VariantAnnotation_1.52.0 ## [130] scales_1.3.0             crayon_1.5.3             GetoptLong_1.0.5         ## [133] rlang_1.1.4              cowplot_1.1.3            KEGGREST_1.46.0"},{"path":"https://ethz-ins.github.io/epiwraps/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Pierre-Luc Germain. Maintainer, author. Emanuel Sonder. Author.","code":""},{"path":"https://ethz-ins.github.io/epiwraps/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Germain P, Sonder E (2024). epiwraps: epiwraps: Wrappers plotting dealing epigenomics data. R package version 0.99.100, https://ethz-ins.github.io/epiwraps/.","code":"@Manual{,   title = {epiwraps: epiwraps: Wrappers for plotting and dealing with epigenomics data},   author = {Pierre-Luc Germain and Emanuel Sonder},   year = {2024},   note = {R package version 0.99.100},   url = {https://ethz-ins.github.io/epiwraps/}, }"},{"path":[]},{"path":"https://ethz-ins.github.io/epiwraps/index.html","id":"introduction","dir":"","previous_headings":"","what":"Introduction","title":"epiwraps: Wrappers for plotting and dealing with epigenomics data","text":"Bioconductor offers powerful packages analysis visualization (epi)genomic data, however often always easy approach users without extensive bioinformatics background. epiwraps package started set wrappers visualization epigenomics data (particular ATAC/ChIP-seq), meant facilitate teaching regulatory genomics hands-exploration data. now evolved set tools around task, including missing R-based alternatives important steps unified interface. Note package documentation still heavy development!","code":""},{"path":"https://ethz-ins.github.io/epiwraps/index.html","id":"recent-changes","dir":"","previous_headings":"Introduction","what":"Recent changes","title":"epiwraps: Wrappers for plotting and dealing with epigenomics data","text":"Version >0.99.80 introduced major changes, particular introduction EnrichmentSE objects, now default output signal2Matrix facilitate manipulations, well renaming normalization functions standardized interface. Please consult vignette update workflows.","code":""},{"path":"https://ethz-ins.github.io/epiwraps/index.html","id":"installation","dir":"","previous_headings":"Introduction","what":"Installation","title":"epiwraps: Wrappers for plotting and dealing with epigenomics data","text":"Install :","code":"BiocManager::install(\"ETHZ-INS/epiwraps\")"},{"path":"https://ethz-ins.github.io/epiwraps/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"epiwraps: Wrappers for plotting and dealing with epigenomics data","text":"package’s functions accept many input formats, much work usually done involving uses bigwig files, package covers flexible generation files, well use extracting plotting data, whether single region across many regions. exemplified following figure:  columns based bam file, select /summarize fragments differently. example, heatmap insertion sites nucleosome-free fragments based bigwig file generated using: information bigwig file generation available bam2bw vignette. information extraction signal files (well format) plotting heatmaps, see vignette effect.","code":"bam2bw(\"aligned.bam\", output_bw=\"NF_cuts.bw\", paired=TRUE, `shift=c(4L,-5L),         binWidth=1L, minFragLength=25, maxFragLength=120, type=\"ends\"`)"},{"path":"https://ethz-ins.github.io/epiwraps/reference/TSSenrichment.html","id":null,"dir":"Reference","previous_headings":"","what":"TSSenrichment — TSSenrichment","title":"TSSenrichment — TSSenrichment","text":"common quality metric ATAC-seq data (see [definition](https://www.encodeproject.org/data-standards/terms/#enrichment)  ). interpretation enrichment score depends annotation  (score tends increase fewer, common TSS used),  according ENCODE guidelines anything 5 concerning quality,  score >8 ideal.","code":""},{"path":"https://ethz-ins.github.io/epiwraps/reference/TSSenrichment.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"TSSenrichment — TSSenrichment","text":"","code":"TSSenrichment(tracks, ensdb, useSeqLevels = NULL)"},{"path":"https://ethz-ins.github.io/epiwraps/reference/TSSenrichment.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"TSSenrichment — TSSenrichment","text":"tracks (named) vector paths bigwig files. ensdb `ensembldb` object. Alternatively, GRanges object regions centered around TSS. useSeqLevels Optional seqlevels use. NULL, used.","code":""},{"path":"https://ethz-ins.github.io/epiwraps/reference/TSSenrichment.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"TSSenrichment — TSSenrichment","text":"list slots `score` (numeric vector TSS enrichment   scores per sample) `data` (per bin enrichment, plotting)","code":""},{"path":"https://ethz-ins.github.io/epiwraps/reference/TSSenrichment.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"TSSenrichment — TSSenrichment","text":"","code":"# we first fetch the path to the example bigwig file: bw <- system.file(\"extdata/example_atac.bw\", package=\"epiwraps\") ## normally, we would load an ensembldb object using AnnotationHub. For the  ## purpose of this example, we'll pretend that the following set of regions ## represent TSS: tss <- system.file(\"extdata/example_peaks.bed\", package=\"epiwraps\") tss <- rtracklayer::import(tss) en <- TSSenrichment(bw, tss) #> Reading /home/runner/work/_temp/Library/epiwraps/extdata/example_atac.bw en$score #> example_atac  #>     5.768383  ## you can also plot using something like this: ## ggplot(en$data, aes(position, enrichment, colour=sample)) + geom_line()"},{"path":"https://ethz-ins.github.io/epiwraps/reference/addAssayToESE.html","id":null,"dir":"Reference","previous_headings":"","what":"addAssayToESE — addAssayToESE","title":"addAssayToESE — addAssayToESE","text":"Adds assay signal matrices existing `EnrichmentSE` object.","code":""},{"path":"https://ethz-ins.github.io/epiwraps/reference/addAssayToESE.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"addAssayToESE — addAssayToESE","text":"","code":"addAssayToESE(x, a, name = \"normalized\", replace = TRUE)"},{"path":"https://ethz-ins.github.io/epiwraps/reference/addAssayToESE.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"addAssayToESE — addAssayToESE","text":"x object class `EnrichmentSE`, produced signal2Matrix. assay add, e.g. list normalizedMatrix objects name  replace Logical, whether replace existing assay name (default TRUE). FALSE assay already existed, new assay name given suffix.","code":""},{"path":"https://ethz-ins.github.io/epiwraps/reference/addAssayToESE.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"addAssayToESE — addAssayToESE","text":"`x` added/updated assay.","code":""},{"path":"https://ethz-ins.github.io/epiwraps/reference/addAssayToESE.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"addAssayToESE — addAssayToESE","text":"","code":"# we first get an EnrichmentSE object: data(exampleESE) # then we will create a new assay which is simply sqrt-transformed, and add  # it back in the object newAssay <- lapply(getSignalMatrices(x), sqrt) #> Error in h(simpleError(msg, call)): error in evaluating the argument 'X' in selecting a method for function 'lapply': object 'x' not found exampleESE <- addAssayToESE(exampleESE, newAssay, named=\"sqrt\") #> Error in addAssayToESE(exampleESE, newAssay, named = \"sqrt\"): unused argument (named = \"sqrt\")"},{"path":"https://ethz-ins.github.io/epiwraps/reference/annotateRegions.html","id":null,"dir":"Reference","previous_headings":"","what":"annotateRegions — annotateRegions","title":"annotateRegions — annotateRegions","text":"Annotates GRanges basis annotation object (e.g. EnsDb).","code":""},{"path":"https://ethz-ins.github.io/epiwraps/reference/annotateRegions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"annotateRegions — annotateRegions","text":"","code":"annotateRegions(   regions,   anno,   proximal = c(2500, 1000),   filter = AnnotationFilterList(),   extra = list(),   ignore.strand = TRUE,   ... )"},{"path":"https://ethz-ins.github.io/epiwraps/reference/annotateRegions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"annotateRegions — annotateRegions","text":"regions GRanges object anno annotation object, EnsDb) object, TxDb object, GRanges object GENCODE-like gtf path file. proximal threshold(s) TSS proximal regions. Multiple values result multiple class factor levels. filter AnnotationFilter filter transcripts. used `anno` EnsDb). extra optional named list GRanges additional overlaps. list element create additional binary metadata column. ignore.strand Whether ignore strand overlap elements `extra` (default TRUE). ... Passed overlapsAny overlaps `extra`.","code":""},{"path":"https://ethz-ins.github.io/epiwraps/reference/annotateRegions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"annotateRegions — annotateRegions","text":"sorted `regions` object additional annotation columns.","code":""},{"path":"https://ethz-ins.github.io/epiwraps/reference/bam2bw.html","id":null,"dir":"Reference","previous_headings":"","what":"bam2bw: create a coverage bigwig file from an alignment bam file. — bam2bw","title":"bam2bw: create a coverage bigwig file from an alignment bam file. — bam2bw","text":"bam2bw: create coverage bigwig file alignment bam file.","code":""},{"path":"https://ethz-ins.github.io/epiwraps/reference/bam2bw.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"bam2bw: create a coverage bigwig file from an alignment bam file. — bam2bw","text":"","code":"bam2bw(   bamfile,   output_bw,   bgbam = NULL,   paired = NULL,   binWidth = 20L,   extend = 0L,   scaling = TRUE,   shift = 0L,   type = c(\"full\", \"center\", \"start\", \"end\", \"ends\"),   compType = c(\"log2ratio\", \"subtract\", \"log10ppois\", \"log10FE\"),   strand = c(\"*\", \"+\", \"-\"),   strandMode = 1,   log1p = FALSE,   exclude = NULL,   includeDuplicates = TRUE,   includeSecondary = FALSE,   minMapq = 1L,   minFragLength = 1L,   maxFragLength = 5000L,   keepSeqLvls = NULL,   splitByChr = 3,   pseudocount = 1L,   localBackground = 1L,   only = NULL,   zeroCap = TRUE,   forceSeqlevelsStyle = NULL,   verbose = TRUE,   binSummarization = c(\"mean\", \"max\", \"min\"),   ... )"},{"path":"https://ethz-ins.github.io/epiwraps/reference/bam2bw.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"bam2bw: create a coverage bigwig file from an alignment bam file. — bam2bw","text":"bamfile path signal bam file. output_bw path output bigwig file bgbam optional path control/input bam file compute relative signal (see `compType` argument). paired Logical; whether consider fragments instead reads paired-end data. spliced (e.g. RNA-seq) data, paired always set FALSE. binWidth window size. lower value (min 1) means higher resolution, larger file size. extend amount ** extend single-end reads (e.g. fragment length minus read length). `paired=TRUE` `type` either 'ends' 'center', extension applied taking (shifted) fragment ends centers, resulting ranges width equal `extend`. scaling Either TRUE (performs Count Per Million scaling), FALSE (scaling), numeric value signal divided. `bgbam` given `scaling=TRUE`, background scaled main signal. shift Shift (3' 5') reads/fragments shifted. `shift` integer vector length 2, first value represent shift positive strand, second negative strand. ATACseq data, one normally uses `shift=c(4L,-5L)`. type Type coverage compile. Either full (full read/fragment), start (count read/fragment start locations), end, center, 'ends' (ends read/fragment). compType type relative signal compute (ignored `bgbam` given). Can either 'log2ratio' (log2-foldchange signals), 'subtract' (difference), 'log10ppois' (rounded -log10 poisson p-value), 'log10FE' (log10 fold-enrichment). fold-based signals, `pseudocount` added computing ratio. default negative values capped (see `zeroCap`). strand Strand(s) capture (default). strandMode strandMode data (whether strand given first second mate, depends library prep protocol). See strandMode information. parameter effect unless one `strand`, `extend` parameters strand-specific `shift` used. log1p Whether log-transform (`log(x+1)`) (scaled) signal. Ignored signal relative background. exclude optional GRanges regions overlapping reads excluded. includeDuplicates Logical, whether include reads flagged duplicates. includeSecondary Logical; whether include secondary alignments minMapq Minimum mapping quality (1 255) minFragLength Minimum fragment length (ignored `paired=FALSE`) maxFragLength Maximum fragment length (ignored `paired=FALSE`) keepSeqLvls optional vector seqLevels (.e. chromosomes) include. splitByChr Whether process chromosomes separately, many chunks. affect output, simply slightly slower consumes less memory. Can logical value (case chromosome processed separately), instead recommend giving positive integer indicating number chunks. pseudocount count added fold-enrichment calculation signals. Ignored `compType=\"subtract\"`. localBackground (vector ) number windows around tile/position local background calculated. background used maximum one given position mean local backgrounds. optional GRanges regions overlapping reads included. set, reads discarded. zeroCap Logical; whether cap values zero zero producing relative signals. forceSeqlevelsStyle specified, forces use specified seqlevel style output bigwig. Can take value accepted `seqlevelsStyle`. verbose Logical; whether print progress messages binSummarization method summarize nucleotides bin, either \"max\" (default), \"min\" \"mean\". ... Passed `ScanBamParam`","code":""},{"path":"https://ethz-ins.github.io/epiwraps/reference/bam2bw.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"bam2bw: create a coverage bigwig file from an alignment bam file. — bam2bw","text":"bigwig filepath. Alternatively, `output_bw=NA_character_`,   coverage data written file returned.","code":""},{"path":"https://ethz-ins.github.io/epiwraps/reference/bam2bw.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"bam2bw: create a coverage bigwig file from an alignment bam file. — bam2bw","text":"* single-end ChIPseq data, extend reads expected fragment size   using `extend` argument. * implementation involves reading reads processing, can  quite memory-hungry. avoid files read chunks (composed   chromosomes balanced sizes), controlled `splitByChr` argument.   reduces memory usage also creates overhead reduces   speed. contexts file small memory problem, using  `splitByChr=FALSE` achieve best speed. Otherwise, increasing  `splitByChr` decrease memory footprint. * Consider restricting read quality using `includeDuplicates=FALSE`   `minMapq=20` example.","code":""},{"path":"https://ethz-ins.github.io/epiwraps/reference/bam2bw.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"bam2bw: create a coverage bigwig file from an alignment bam file. — bam2bw","text":"Pierre-Luc Germain","code":""},{"path":"https://ethz-ins.github.io/epiwraps/reference/bam2bw.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"bam2bw: create a coverage bigwig file from an alignment bam file. — bam2bw","text":"","code":"# get an example bam file bam <- system.file(\"extdata\", \"ex1.bam\", package=\"Rsamtools\") # create bigwig bam2bw(bam, \"output.bw\") #> `paired` not specified, assuming single-end reads. Set to paired='auto' to automatically detect. #> Reading in signal... #> Writing bigwig..."},{"path":"https://ethz-ins.github.io/epiwraps/reference/bamChrChunkApply.html","id":null,"dir":"Reference","previous_headings":"","what":"bamChrChunkApply — bamChrChunkApply","title":"bamChrChunkApply — bamChrChunkApply","text":"Runs function reads/fragments chunks (chromosomes) indexed bam file. especially used functions avoid loading alignments memory, parallelize reads processing.","code":""},{"path":"https://ethz-ins.github.io/epiwraps/reference/bamChrChunkApply.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"bamChrChunkApply — bamChrChunkApply","text":"","code":"bamChrChunkApply(   x,   FUN,   paired = FALSE,   keepSeqLvls = NULL,   nChunks = 4,   strandMode = 2,   flgs = scanBamFlag(),   exclude = NULL,   mapqFilter = NA_integer_,   BPPARAM = SerialParam(),   ... )"},{"path":"https://ethz-ins.github.io/epiwraps/reference/bamChrChunkApply.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"bamChrChunkApply — bamChrChunkApply","text":"x bam file. FUN function run, first argument `GRanges` paired Logical; whether consider reads paired (fragments, rather reads, returned) keepSeqLvls optional vector seqLevels keep nChunks number chunks use (higher use less memory increase overhead) strandMode Strandmode paired data (see readGAlignmentPairs). flgs `scanBamFlag` filtering reads exclude optional GRanges regions overlapping reads excluded. mapqFilter Integer minimum mapping quality reads included. BPPARAM `BiocParallel` parameter object multithreading. Note used, memory usage high; context recommend high `nChunks`. ... Passed `FUN`","code":""},{"path":"https://ethz-ins.github.io/epiwraps/reference/bamChrChunkApply.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"bamChrChunkApply — bamChrChunkApply","text":"list whatever `FUN` returns","code":""},{"path":"https://ethz-ins.github.io/epiwraps/reference/bamChrChunkApply.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"bamChrChunkApply — bamChrChunkApply","text":"","code":"# as an example we'll use the function to obtain fragment sizes: bam <- system.file(\"extdata\", \"ex1.bam\", package=\"Rsamtools\") fragLen <- bamChrChunkApply(bam, paired=TRUE, FUN=function(x) width(x)) quantile(unlist(fragLen)) #>   0%  25%  50%  75% 100%  #>   54  199  209  218  243"},{"path":"https://ethz-ins.github.io/epiwraps/reference/breakStrings.html","id":null,"dir":"Reference","previous_headings":"","what":"breakStrings — breakStrings","title":"breakStrings — breakStrings","text":"breaks string long-enough words (vector thereof) two lines.","code":""},{"path":"https://ethz-ins.github.io/epiwraps/reference/breakStrings.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"breakStrings — breakStrings","text":"","code":"breakStrings(x, minSizeForBreak = 20, lb = \"\\n\")"},{"path":"https://ethz-ins.github.io/epiwraps/reference/breakStrings.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"breakStrings — breakStrings","text":"x character (factor) vector. minSizeForBreak minimum number characters broken two lines. lb separation character (e.g. line break).","code":""},{"path":"https://ethz-ins.github.io/epiwraps/reference/breakStrings.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"breakStrings — breakStrings","text":"character vector length=length(x).","code":""},{"path":"https://ethz-ins.github.io/epiwraps/reference/breakStrings.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"breakStrings — breakStrings","text":"","code":"breakStrings(\"this is too long for practical purposes\") #>    this is too long for practical purposes  #> \"this is too long for\\npractical purposes\""},{"path":"https://ethz-ins.github.io/epiwraps/reference/callPeaks.html","id":null,"dir":"Reference","previous_headings":"","what":"callPeaks — callPeaks","title":"callPeaks — callPeaks","text":"R-based implementation general MACS2 strategy (Zhang et al.,  Genome Biology 2008), taking freedom comparison  original. function still development, especially  respect single-end reads, optimization might still needed.  paired-end reads, results nearly identical MACS2,  two main differences: 1) p-values conservative ( arguably better calibrated) 2) implementation rely  sliding windows, default settings peaks narrower.","code":""},{"path":"https://ethz-ins.github.io/epiwraps/reference/callPeaks.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"callPeaks — callPeaks","text":"","code":"callPeaks(   bam,   ctrl = NULL,   paired = FALSE,   type = c(\"narrow\", \"broad\"),   nullH = c(\"local\", \"global.nb\", \"global.bin\"),   blacklist = NULL,   binSize = 10L,   fragLength = 200L,   minPeakCount = 5L,   minFoldChange = 1.3,   pthres = 10^-3,   maxSize = NULL,   bgWindow = c(1, 5, 10) * 1000,   pseudoCount = 1L,   useStrand = TRUE,   outFormat = c(\"custom\", \"narrowPeak\"),   verbose = TRUE,   ... )"},{"path":"https://ethz-ins.github.io/epiwraps/reference/callPeaks.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"callPeaks — callPeaks","text":"bam signal bam file ctrl optional (highly recommended) control bam file paired Logical, whether reads paired type type peaks identify ('narrow' 'broad'). blacklist optional `GRanges` regions excluded (path file). Since blacklisted regions removed signal control peaks, also important impact empirical FDR (`ctrl` given). binSize Binsize used estimate peak shift fragLength Fragment length. Ignored `paired=TRUE`. used initial candidate region identification, sizes adjusted , need precise. minPeakCount minimum summit count region considered. Decreasing can substantially increase running time. minFoldChange minimum fold-change region considered. Decreasing can substantially increase running time. pthres p-value threshold use bgWindow windows consider (addition peak ) local background. outFormat output format ('custom' 'narrowPeak') verbose Logical; whether output progress messages ... Passed bamChrChunkApply","code":""},{"path":"https://ethz-ins.github.io/epiwraps/reference/callPeaks.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"callPeaks — callPeaks","text":"`GRanges`","code":""},{"path":"https://ethz-ins.github.io/epiwraps/reference/callPeaks.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"callPeaks — callPeaks","text":"`callPeaks` takes twice long run MACS2, uses memory. dealing large files (low memory system), consider increasing number processing chunks, instance `nChunks=10`. function uses bamChrChunkApply obtain coverages, can accept argument function. means `mapqFilter` bam `flgs` arguments can used restrict reads used.","code":""},{"path":"https://ethz-ins.github.io/epiwraps/reference/clusterSignalMatrices.html","id":null,"dir":"Reference","previous_headings":"","what":"clusterSignalMatrices: clusters the regions of a (set of) signal matrices. — clusterSignalMatrices","title":"clusterSignalMatrices: clusters the regions of a (set of) signal matrices. — clusterSignalMatrices","text":"clusterSignalMatrices: clusters regions (set ) signal matrices.","code":""},{"path":"https://ethz-ins.github.io/epiwraps/reference/clusterSignalMatrices.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"clusterSignalMatrices: clusters the regions of a (set of) signal matrices. — clusterSignalMatrices","text":"","code":"clusterSignalMatrices(   ml,   k,   scaleRows = FALSE,   scaleCols = FALSE,   use = c(\"enrich\", \"full\", \"max\", \"center\"),   by = rep(1L, length(ml)),   assay = 1L,   trim = c(0.05, 0.95),   nstart = 3,   ... )"},{"path":"https://ethz-ins.github.io/epiwraps/reference/clusterSignalMatrices.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"clusterSignalMatrices: clusters the regions of a (set of) signal matrices. — clusterSignalMatrices","text":"ml named list signal matrices EnrichmentSE object produced signal2Matrix k number clusters generate scaleRows Logical; whether scale rows clustering scaleCols Logical; whether scale columns (.e. signals/samples) use values use clustering. default, uses enriched_score. options 'full' (uses full signal clustering), 'max' (uses maximum value region), 'center' (use value center region). Optional factor/character/integer vector length `ml`. scaling rows, can used indicate rows scaled together. assay Assay use (ignored unless `ml` ESE object) trim Values trim (applied individually signal matrix) nstart Number starts k-means clustering ... Passed `kmeans`","code":""},{"path":"https://ethz-ins.github.io/epiwraps/reference/clusterSignalMatrices.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"clusterSignalMatrices: clusters the regions of a (set of) signal matrices. — clusterSignalMatrices","text":"`k` length 1, vector cluster labels, corresponding   rows `ml`. `length(k)>1`, list two data.frames containing:   1) cluster labels different resolutions, 2) variance   explained clusters resolution.","code":""},{"path":"https://ethz-ins.github.io/epiwraps/reference/estimateFragSize.html","id":null,"dir":"Reference","previous_headings":"","what":"estimateFragSize — estimateFragSize","title":"estimateFragSize — estimateFragSize","text":"estimateFragSize","code":""},{"path":"https://ethz-ins.github.io/epiwraps/reference/estimateFragSize.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"estimateFragSize — estimateFragSize","text":"","code":"estimateFragSize(   bam,   ctrl = NULL,   binSize = 10L,   mfold = c(10, 50),   ...,   minSummitCount = 8L,   useSeqLevels = NULL,   maxSize = 2500L,   priorLength = 200L,   blacklist = NULL,   ret = c(\"mode\", \"median\", \"mean\", \"tables\", \"plots\", \"distances\"),   BPPARAM = SerialParam() )"},{"path":"https://ethz-ins.github.io/epiwraps/reference/estimateFragSize.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"estimateFragSize — estimateFragSize","text":"bam path one bam files ctrl Optional path control bam file (`length(bam)>1`, control used ). binSize Bin size. precision reported fragment size necessary lower . higher bin size improve summit identification low-coverage regions. recommend leaving default value. mfold range fold-enrichment control (`ctrl` provided) coverages identification regions based distance estimated. minSummitCount minimum read count summit considered. useSeqLevels optional vector seqLevels conduct analysis. maxSize maximum size regions used priorLength prior fragment length (use read extension identify enriched regions) blacklist Optional `GRanges` blacklisted regions excluded. ret type return, either 'table' pairs summits properties, 'plot', median/mean/mode distance distribution. BPPARAM `BiocParallel` parameter object multithreading. used multiple files given `bam`.","code":""},{"path":"https://ethz-ins.github.io/epiwraps/reference/estimateFragSize.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"estimateFragSize — estimateFragSize","text":"default, estimated (mode) fragment length(s), see   `ret` argument","code":""},{"path":"https://ethz-ins.github.io/epiwraps/reference/estimateFragSize.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"estimateFragSize — estimateFragSize","text":"","code":"# get an example bam file bam <- system.file(\"extdata\", \"ex1.bam\", package=\"Rsamtools\") suppressWarnings(estimateFragSize(bam)) #> [1] 984"},{"path":"https://ethz-ins.github.io/epiwraps/reference/exampleDNAme.html","id":null,"dir":"Reference","previous_headings":"","what":"Example DNAme data on some active gene bodies — exampleDNAme","title":"Example DNAme data on some active gene bodies — exampleDNAme","text":"GRanges object (called `geneBodies`) containing coordinates gene bodies chr9 hg38, well GPos object (called `exampleDNAme`) containing methylation percentages CpGs regions. Taken WG bisulfite sequencing data A549, ENCODE accession ID ENCFF948WVD.","code":""},{"path":"https://ethz-ins.github.io/epiwraps/reference/exampleDNAme.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Example DNAme data on some active gene bodies — exampleDNAme","text":"named character vector length 2.","code":""},{"path":"https://ethz-ins.github.io/epiwraps/reference/exampleESE.html","id":null,"dir":"Reference","previous_headings":"","what":"Example EnrichmentSE object — exampleESE","title":"Example EnrichmentSE object — exampleESE","text":"Small sample signal ENCODE ChIP-seq H3K27ac, H3K4me3 p300, around p300 binding sites TSS mESC.","code":""},{"path":"https://ethz-ins.github.io/epiwraps/reference/exampleESE.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Example EnrichmentSE object — exampleESE","text":"named character vector length 1.","code":""},{"path":"https://ethz-ins.github.io/epiwraps/reference/formatGenomicDist.html","id":null,"dir":"Reference","previous_headings":"","what":"formatGenomicDist — formatGenomicDist","title":"formatGenomicDist — formatGenomicDist","text":"formatGenomicDist","code":""},{"path":"https://ethz-ins.github.io/epiwraps/reference/formatGenomicDist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"formatGenomicDist — formatGenomicDist","text":"","code":"formatGenomicDist(   e,   allowFraction = TRUE,   sameUnits = TRUE,   head0 = TRUE,   units = c(mb = 1e+06, kb = 1000, bp = 1) )"},{"path":"https://ethz-ins.github.io/epiwraps/reference/formatGenomicDist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"formatGenomicDist — formatGenomicDist","text":"e integer vector genomic sizes/distances formatted allowFraction Whether allow decimals; can either logical number decimals allowed (defaults TRUE / 1) sameUnits Logical; whether values get unit. head0 Logical; whether keep heading zero units units use.","code":""},{"path":"https://ethz-ins.github.io/epiwraps/reference/formatGenomicDist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"formatGenomicDist — formatGenomicDist","text":"character vector.","code":""},{"path":"https://ethz-ins.github.io/epiwraps/reference/frag2bw.html","id":null,"dir":"Reference","previous_headings":"","what":"frag2bw — frag2bw","title":"frag2bw — frag2bw","text":"Creates coverage bigwig file Tabix-indexed fragment file.","code":""},{"path":"https://ethz-ins.github.io/epiwraps/reference/frag2bw.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"frag2bw — frag2bw","text":"","code":"frag2bw(   tabixFile,   output_bw,   paired = TRUE,   binWidth = 20L,   extend = 0L,   scaling = TRUE,   type = c(\"full\", \"center\", \"start\", \"end\", \"ends\"),   barcodes = NULL,   strand = c(\"*\", \"+\", \"-\"),   shift = 0L,   log1p = FALSE,   exclude = NULL,   minFragLength = 1L,   maxFragLength = 5000L,   keepSeqLvls = NULL,   useScore = FALSE,   forceSeqlevelsStyle = NULL,   only = NULL,   format = \"bed\",   binSummarization = c(\"max\", \"min\", \"mean\"),   verbose = TRUE )"},{"path":"https://ethz-ins.github.io/epiwraps/reference/frag2bw.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"frag2bw — frag2bw","text":"tabixFile path tabix-indexed bam file, TabixFile object. output_bw path output bigwig file paired Logical; whether coordinates fragments, opposed single-end reads one end fragments given. TRUE default. binWidth window size. lower value (min 1) means higher resolution, larger file size. scaling Either TRUE (performs Count Per Million scaling), FALSE (scaling), numeric value signal divided. `bgbam` given `scaling=TRUE`, background scaled main signal. type Type coverage compile. Either full (full read/fragment), start (count read/fragment start locations), end, center, 'ends' (ends read/fragment). barcodes optional list barcodes use (assuming file contains column) strand Strand(s) capture (default). shift Shift (3' 5') reads/fragments shifted. `shift` integer vector length 2, first value represent shift positive strand, second negative strand. exclude optional GRanges regions overlapping reads excluded. minFragLength Minimum fragment length (ignored `paired=FALSE`) maxFragLength Maximum fragment length (ignored `paired=FALSE`) keepSeqLvls optional vector seqLevels (.e. chromosomes) include. useScore Whether use score column () coverage weights. forceSeqlevelsStyle specified, forces use specified seqlevel style output bigwig. Can take value accepted `seqlevelsStyle`. optional GRanges regions overlapping reads included. set, reads discarded. format format fragment file. binSummarization method summarize nucleotides bin, either \"max\" (default), \"min\" \"mean\". verbose Logical; whether print progress messages","code":""},{"path":"https://ethz-ins.github.io/epiwraps/reference/frag2bw.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"frag2bw — frag2bw","text":"bigwig filepath. Alternatively, `output_bw=NA_character_`,   coverage data written file returned.","code":""},{"path":"https://ethz-ins.github.io/epiwraps/reference/frag2bw.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"frag2bw — frag2bw","text":"","code":"# we first create a fake tabix file: library(GenomicRanges) library(rtracklayer) reads <- GRanges(rep(c(\"1\",\"2\"), c(5,2)),                  IRanges(5000+10*1:7, width=100)) bedf <- tempfile(fileext=\".bed\") rtracklayer::export.bed(reads, bedf) bedf <- Rsamtools::bgzip(bedf) Rsamtools::indexTabix(bedf, format=\"bed\") #> [1] \"/tmp/RtmpGRoAzS/file311811cfc30a.bed.bgz.tbi\" # convert to bigwig frag2bw(bedf, tempfile(fileext=\".bw\")) #> Reading in signal... #> Writing bigwig..."},{"path":"https://ethz-ins.github.io/epiwraps/reference/fragSizesDist.html","id":null,"dir":"Reference","previous_headings":"","what":"fragSizesDist — fragSizesDist","title":"fragSizesDist — fragSizesDist","text":"fragSizesDist","code":""},{"path":"https://ethz-ins.github.io/epiwraps/reference/fragSizesDist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"fragSizesDist — fragSizesDist","text":"","code":"fragSizesDist(   x,   what = 10000,   flags = scanBamFlag(isProperPair = TRUE),   BPPARAM = SerialParam(),   returnPlot = TRUE )"},{"path":"https://ethz-ins.github.io/epiwraps/reference/fragSizesDist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"fragSizesDist — fragSizesDist","text":"x (named) vector paths bam files. Either positive integer (length 1) indicating many reads randomly sample, character vector (length 1) indicating chromosome read. flags `scanBamFlag` object (see ScanBamParam) BPPARAM BiocParallel BPPARAM object multithreading. returnPlot Logical; whether return plot.","code":""},{"path":"https://ethz-ins.github.io/epiwraps/reference/fragSizesDist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"fragSizesDist — fragSizesDist","text":"`returnPlot=TRUE`, returns ggplot object, otherwise data.frame fragment lengths.","code":""},{"path":"https://ethz-ins.github.io/epiwraps/reference/fragSizesDist.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"fragSizesDist — fragSizesDist","text":"","code":"# example bam file: bam <- system.file(\"extdata\", \"ex1.bam\", package=\"Rsamtools\") fragSizesDist(bam, what=100)"},{"path":"https://ethz-ins.github.io/epiwraps/reference/getCovStats.html","id":null,"dir":"Reference","previous_headings":"","what":"getCovStats — getCovStats","title":"getCovStats — getCovStats","text":"Assembles read distribution statistics set bigwig files based random windows.","code":""},{"path":"https://ethz-ins.github.io/epiwraps/reference/getCovStats.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"getCovStats — getCovStats","text":"","code":"getCovStats(   x,   binSize = 1000,   nbBins = 10000,   exclude = NULL,   canonical.chr = TRUE,   maxCovQuant = 0.999,   BPPARAM = SerialParam() )"},{"path":"https://ethz-ins.github.io/epiwraps/reference/getCovStats.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"getCovStats — getCovStats","text":"x (named) vector paths bigwig files (genome) binSize size bins nbBins approximate number random bins. bins gives accurate readouts take longer read compute. exclude Region exclude canonical.chr Logical; whether restrict sampling standard chromosomes. maxCovQuant quantile use maximum coverage (default 0.999) BPPARAM BioParallel BPPARAM multithreading across files.","code":""},{"path":"https://ethz-ins.github.io/epiwraps/reference/getCovStats.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"getCovStats — getCovStats","text":"named list QC tables","code":""},{"path":"https://ethz-ins.github.io/epiwraps/reference/getCovStats.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"getCovStats — getCovStats","text":"","code":"# we use an example bigwig file bwf <- system.file(\"extdata/example_atac.bw\", package=\"epiwraps\") # because most of the file is empty, we'll exclude some of the ranges cs <- getCovStats(bwf, exclude=GRanges(\"1\", IRanges(1, 4300000))) plotCovStats(cs)"},{"path":"https://ethz-ins.github.io/epiwraps/reference/getEmpiricalFDR.html","id":null,"dir":"Reference","previous_headings":"","what":"getEmpiricalFDR — getEmpiricalFDR","title":"getEmpiricalFDR — getEmpiricalFDR","text":"Computes FDR proportion negative peaks extreme   p-value, eventually extrapolating preserving ranking.","code":""},{"path":"https://ethz-ins.github.io/epiwraps/reference/getEmpiricalFDR.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"getEmpiricalFDR — getEmpiricalFDR","text":"","code":"getEmpiricalFDR(log10p, pneg, n = length(log10p) * 10)"},{"path":"https://ethz-ins.github.io/epiwraps/reference/getEmpiricalFDR.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"getEmpiricalFDR — getEmpiricalFDR","text":"log10p -log10 p-values candidate peaks pneg -log10 p-values negative peaks n number hypotheses (used empirical FDR zero)","code":""},{"path":"https://ethz-ins.github.io/epiwraps/reference/getEmpiricalFDR.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"getEmpiricalFDR — getEmpiricalFDR","text":"data.frame empirical FDR smoothed -log10(FDR)","code":""},{"path":"https://ethz-ins.github.io/epiwraps/reference/getNormFactors.html","id":null,"dir":"Reference","previous_headings":"","what":"getNormFactors : estimate normalization factors from genomic signal files — getNormFactors","title":"getNormFactors : estimate normalization factors from genomic signal files — getNormFactors","text":"Estimates normalization factors set samples (.e. bam/bigwig files).","code":""},{"path":"https://ethz-ins.github.io/epiwraps/reference/getNormFactors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"getNormFactors : estimate normalization factors from genomic signal files — getNormFactors","text":"","code":"getNormFactors(   x,   method = c(\"background\", \"SES\", \"enriched\", \"top\", \"MAnorm\", \"S3norm\", \"2cLinear\"),   wsize = 10L,   nwind = 20000L,   peaks = NULL,   trim = 0.02,   useSeqLevels = NULL,   paired = NULL,   ...,   verbose = TRUE )  bwNormFactors(x, ...)"},{"path":"https://ethz-ins.github.io/epiwraps/reference/getNormFactors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"getNormFactors : estimate normalization factors from genomic signal files — getNormFactors","text":"x vector paths bigwig files, bam files, alternatively list coverages RleList format. (Mixed formats supported) method Normalization method (see details ). wsize size random windows. bigwig files records point events (e.g. insertions) high resolution (e.g. nucleotide), use lot (e.g. >10k) small windows (e.g. `wsize=10`), per default settings. Otherwise process can lightened using fewer bigger windows. nwind number random windows peaks list peaks (GRanges) experiment `x`, vector paths files, single GRanges unified peaks use (e.g. top/MAnorm). trim Amount trimming calculating means.","code":""},{"path":"https://ethz-ins.github.io/epiwraps/reference/getNormFactors.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"getNormFactors : estimate normalization factors from genomic signal files — getNormFactors","text":"vector normalization factors, 'S3norm' '2cLinear'   methods, numeric matrix number rows equal length   `x`, two columns indicating alpha beta terms. vector normalization factors , methods 'S3norm'   '2cLinear', matrix per-sample normalization parameters.","code":""},{"path":"https://ethz-ins.github.io/epiwraps/reference/getNormFactors.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"getNormFactors : estimate normalization factors from genomic signal files — getNormFactors","text":"function computes per-sample (bigwig bam file) normalization factors using one following methods: * 'background' 'SES' normalization method (synonyms ) (Diaz et al., Stat Appl Gen et Mol Biol, 2012) assumes background noise average across experiments, assumption works well practice large differences signal--noise ratio. implementation uses trimmed mean number reads random windows non-zero counts. * 'MAnorm' approach (Shao et al., Genome Biology 2012) assumes regions commonly enriched (.e. common peaks) two experiments average signal two experiments. data strictly positive (e.g. counts CPMs), TMM normalization (Robinson et al., Genome Biology 2010) employed common peaks. done two samples, sample highest number overlaps samples used reference. * 'enriched' approach assumes enriched regions average similarly enriched across samples. Contrarily 'MAnorm', regions need common across samples/experiments. Note trimming via `trim` parameter performed calculating means. * 'top' approach assumes maximum enrichment (trimming according `trim` parameter) peaks across samples/experiments. * 'S3norm' (Xiang et al., NAR 2020) '2cLinear' methods try normalize enrichment background simultaneously. S3norm log-linear fashion (publication), '2cLinear' original scale. Several methods rely random regions estimate background levels. means entirely deterministic, although normally quite reproducible experiments sparse. fully reproducible results, sure set random seed. data sparse (e.g. low sequencing depth, compiling single nucleotide hits rather fragment coverage), might necessary increase `wsize` `nwind` get robust estimates.","code":""},{"path":"https://ethz-ins.github.io/epiwraps/reference/getNormFactors.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"getNormFactors : estimate normalization factors from genomic signal files — getNormFactors","text":"bwNormFactors(): deprecated favor getNormFactors","code":""},{"path":"https://ethz-ins.github.io/epiwraps/reference/getNormFactors.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"getNormFactors : estimate normalization factors from genomic signal files — getNormFactors","text":"","code":"# we get an example bigwig file, and use it twice: bw <- system.file(\"extdata/example_atac.bw\", package=\"epiwraps\") bw <- c(sample1=bw, sample2=bw) # we indicate to use only chr1, because it's the only one in the example file getNormFactors(bw, useSeqLevels=\"1\") #> Comparing coverage in random regions... #> Warning: Some samples have less than 50 non-zero windows. Consider increasing the window size or (better) the number of windows. #> sample1 sample2  #>       1       1"},{"path":"https://ethz-ins.github.io/epiwraps/reference/getSignalMatrices.html","id":null,"dir":"Reference","previous_headings":"","what":"getSignalMatrices — getSignalMatrices","title":"getSignalMatrices — getSignalMatrices","text":"Extracts list signal matrices EnrichmentSE object.","code":""},{"path":"https://ethz-ins.github.io/epiwraps/reference/getSignalMatrices.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"getSignalMatrices — getSignalMatrices","text":"","code":"getSignalMatrices(x, assay = 1L)"},{"path":"https://ethz-ins.github.io/epiwraps/reference/getSignalMatrices.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"getSignalMatrices — getSignalMatrices","text":"x object class `EnrichmentSE`, produced signal2Matrix. assay assay extract (defaults first assay).","code":""},{"path":"https://ethz-ins.github.io/epiwraps/reference/getSignalMatrices.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"getSignalMatrices — getSignalMatrices","text":"list normalizedMatrix objects.","code":""},{"path":"https://ethz-ins.github.io/epiwraps/reference/getSignalMatrices.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"getSignalMatrices — getSignalMatrices","text":"","code":"# we first get an EnrichmentSE object: data(exampleESE) # then we can extract the list of signal matrices: sm <- getSignalMatrices(exampleESE)"},{"path":"https://ethz-ins.github.io/epiwraps/reference/importBedlike.html","id":null,"dir":"Reference","previous_headings":"","what":"importBedlike — importBedlike","title":"importBedlike — importBedlike","text":"Imports bed-like file GRanges object. Uses `rtracklayer` import functions possible, falls back onto import format-committed otherwise.","code":""},{"path":"https://ethz-ins.github.io/epiwraps/reference/importBedlike.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"importBedlike — importBedlike","text":"","code":"importBedlike(x, ...)"},{"path":"https://ethz-ins.github.io/epiwraps/reference/importBedlike.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"importBedlike — importBedlike","text":"x path bed bed-like file (can gzipped) ... passed fread","code":""},{"path":"https://ethz-ins.github.io/epiwraps/reference/importBedlike.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"importBedlike — importBedlike","text":"`GRanges` object","code":""},{"path":"https://ethz-ins.github.io/epiwraps/reference/importBedlike.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"importBedlike — importBedlike","text":"","code":"# example bed file: filepath <- system.file(\"extdata/example_peaks.bed\",                          package=\"epiwraps\") b <- importBedlike(filepath)"},{"path":"https://ethz-ins.github.io/epiwraps/reference/inject.html","id":null,"dir":"Reference","previous_headings":"","what":"Inject (insert) values at positions in a vector — inject","title":"Inject (insert) values at positions in a vector — inject","text":"Inject (insert) values positions vector","code":""},{"path":"https://ethz-ins.github.io/epiwraps/reference/inject.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Inject (insert) values at positions in a vector — inject","text":"","code":"inject(what, inWhat, at)"},{"path":"https://ethz-ins.github.io/epiwraps/reference/inject.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Inject (insert) values at positions in a vector — inject","text":"values inject inWhat vector inject positions vector ** inject values.","code":""},{"path":"https://ethz-ins.github.io/epiwraps/reference/inject.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Inject (insert) values at positions in a vector — inject","text":"vector mode `inWhat`, length equal sum   lengths `` `inWhat`.","code":""},{"path":"https://ethz-ins.github.io/epiwraps/reference/inject.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Inject (insert) values at positions in a vector — inject","text":"","code":"inWhat <- 1:10 inject(c(21,22,23), inWhat, at=as.integer(c(0,5,10))) #>  [1] 21  1  2  3  4  5 22  6  7  8  9 10 23"},{"path":"https://ethz-ins.github.io/epiwraps/reference/meltSignals.html","id":null,"dir":"Reference","previous_headings":"","what":"meltSignals — meltSignals","title":"meltSignals — meltSignals","text":"Aggregates melts list signal matrices, plotting (ggplot).","code":""},{"path":"https://ethz-ins.github.io/epiwraps/reference/meltSignals.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"meltSignals — meltSignals","text":"","code":"meltSignals(ml, fun = NULL, splitBy = NULL, trim = 0.98, assay = 1L)"},{"path":"https://ethz-ins.github.io/epiwraps/reference/meltSignals.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"meltSignals — meltSignals","text":"ml named list signal matrices EnrichmentSE object produced signal2Matrix fun optional custom aggregation function (named list thereof). splitBy vector values (factor character length equal `nrow(ml)`) split aggregation. Can also name column `rowData(ml)`. trim quantile trim values. numeric vector length 2, used lower upper quantiles beyond trim. assay Assay use (ignored unless `ml` ESE object), defaults first assay.","code":""},{"path":"https://ethz-ins.github.io/epiwraps/reference/meltSignals.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"meltSignals — meltSignals","text":"data.frame.","code":""},{"path":"https://ethz-ins.github.io/epiwraps/reference/meltSignals.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"meltSignals — meltSignals","text":"","code":"# we first get an EnrichmentSE object: data(exampleESE) # we extract the means per position: d <- meltSignals(exampleESE) head(d) #>   position  sample     mean       SD       SE median #> 1    -2000 H3K27ac 83.28000 182.5112 14.90197   11.5 #> 2    -1950 H3K27ac 85.87333 189.9628 15.51040   11.5 #> 3    -1900 H3K27ac 91.19333 207.2911 16.92525    9.0 #> 4    -1850 H3K27ac 90.92000 201.2272 16.43013    8.5 #> 5    -1800 H3K27ac 88.02667 192.6586 15.73051   10.0 #> 6    -1750 H3K27ac 85.52000 173.5301 14.16867   14.5 ## we could then plot for instance using ggplot: # ggplot(d, aes(position, mean, colour=sample)) + geom_line(size=1.2)"},{"path":"https://ethz-ins.github.io/epiwraps/reference/mergeSignalMatrices.html","id":null,"dir":"Reference","previous_headings":"","what":"mergeSignalMatrices: aggregates two or more signal matrices. — mergeSignalMatrices","title":"mergeSignalMatrices: aggregates two or more signal matrices. — mergeSignalMatrices","text":"mergeSignalMatrices: aggregates two signal matrices.","code":""},{"path":"https://ethz-ins.github.io/epiwraps/reference/mergeSignalMatrices.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"mergeSignalMatrices: aggregates two or more signal matrices. — mergeSignalMatrices","text":"","code":"mergeSignalMatrices(ml, aggregation = c(\"mean\", \"sum\", \"median\"), assay = 1L)"},{"path":"https://ethz-ins.github.io/epiwraps/reference/mergeSignalMatrices.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"mergeSignalMatrices: aggregates two or more signal matrices. — mergeSignalMatrices","text":"ml named list signal matrices EnrichmentSE object produced signal2Matrix aggregation method aggregate matrices assay Assay use (ignored unless `ml` ESE object), defaults first assay.","code":""},{"path":"https://ethz-ins.github.io/epiwraps/reference/mergeSignalMatrices.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"mergeSignalMatrices: aggregates two or more signal matrices. — mergeSignalMatrices","text":"single `normalizedMatrix` object.","code":""},{"path":"https://ethz-ins.github.io/epiwraps/reference/mergeSignalMatrices.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"mergeSignalMatrices: aggregates two or more signal matrices. — mergeSignalMatrices","text":"","code":"# we first get an EnrichmentSE object: data(exampleESE) # we merge the two tracks: merged <- mergeSignalMatrices(exampleESE) # we could then plot the merge (not run): # plotEnrichedHeatmaps(merged)"},{"path":"https://ethz-ins.github.io/epiwraps/reference/ml2ESE.html","id":null,"dir":"Reference","previous_headings":"","what":"Creates an EnrichmentSE from a list of normalizedMatrix objects — ml2ESE","title":"Creates an EnrichmentSE from a list of normalizedMatrix objects — ml2ESE","text":"Creates EnrichmentSE list normalizedMatrix objects","code":""},{"path":"https://ethz-ins.github.io/epiwraps/reference/ml2ESE.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Creates an EnrichmentSE from a list of normalizedMatrix objects — ml2ESE","text":"","code":"ml2ESE(ml, rowRanges, assayName = \"input\", addScore = FALSE, ...)"},{"path":"https://ethz-ins.github.io/epiwraps/reference/ml2ESE.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Creates an EnrichmentSE from a list of normalizedMatrix objects — ml2ESE","text":"ml named list normalizedMatrix objects corresponding rows. rowRanges optional GRanges object corresponding rows object `ml`. assayName name assay, defaults 'input' addScore Logical; whether add enriched_score assay. ... Passed `SummarizedExperiment()`","code":""},{"path":"https://ethz-ins.github.io/epiwraps/reference/ml2ESE.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Creates an EnrichmentSE from a list of normalizedMatrix objects — ml2ESE","text":"","code":"# for an example we first need a list of signal matrices. To this end,  # we first fetch the path to the example bigwig file: bw <- system.file(\"extdata/example_atac.bw\", package=\"epiwraps\") # we load example regions: regions <- rtracklayer::import(system.file(\"extdata/example_peaks.bed\",                                             package=\"epiwraps\")) # we obtain the matrix of the signal around the regions, indicating that we # want the output as a list of signal matrices: m <- signal2Matrix(bw, regions, ret=\"list\") #> Reading /home/runner/work/_temp/Library/epiwraps/extdata/example_atac.bw # we can then transform this into an EnrichmentSE object: m <- ml2ESE(m) #> Error in ml2ESE(m): argument \"rowRanges\" is missing, with no default"},{"path":"https://ethz-ins.github.io/epiwraps/reference/motifFootprint.html","id":null,"dir":"Reference","previous_headings":"","what":"motifFootprint — motifFootprint","title":"motifFootprint — motifFootprint","text":"wrapper around `ATACseqQC::factorFootprints`, making compatible broader variety inputs use cases.","code":""},{"path":"https://ethz-ins.github.io/epiwraps/reference/motifFootprint.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"motifFootprint — motifFootprint","text":"","code":"motifFootprint(bamfile, motif, motif_occurences, genome = NULL, around = 100)"},{"path":"https://ethz-ins.github.io/epiwraps/reference/motifFootprint.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"motifFootprint — motifFootprint","text":"bamfile path bam file motif motif (probability matrix) motif_occurences GRanges motif occurences genome Optional genome used seqlengths (otherwise estimated occurences) around much around motif plot","code":""},{"path":"https://ethz-ins.github.io/epiwraps/reference/motifFootprint.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"motifFootprint — motifFootprint","text":"plot","code":""},{"path":"https://ethz-ins.github.io/epiwraps/reference/plotCorFromCovStats.html","id":null,"dir":"Reference","previous_headings":"","what":"plotCorFromCovStats — plotCorFromCovStats","title":"plotCorFromCovStats — plotCorFromCovStats","text":"plotCorFromCovStats","code":""},{"path":"https://ethz-ins.github.io/epiwraps/reference/plotCorFromCovStats.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"plotCorFromCovStats — plotCorFromCovStats","text":"","code":"plotCorFromCovStats(   qc,   method = c(\"pearson\", \"spearman\"),   col = NULL,   na_col = \"white\",   column_title = NULL,   ... )"},{"path":"https://ethz-ins.github.io/epiwraps/reference/plotCorFromCovStats.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"plotCorFromCovStats — plotCorFromCovStats","text":"qc list coverage statistics, produced getCovStats. method correlation metrics include col Optional heatmap colors na_col Color diagonal; passed Heatmap. column_title Column title (NULL, uses metric) ... Passed Heatmap.","code":""},{"path":"https://ethz-ins.github.io/epiwraps/reference/plotCorFromCovStats.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"plotCorFromCovStats — plotCorFromCovStats","text":"`Heatmap` `HeatmapList` object ready plotted.","code":""},{"path":"https://ethz-ins.github.io/epiwraps/reference/plotCovStats.html","id":null,"dir":"Reference","previous_headings":"","what":"plotCovStats — plotCovStats","title":"plotCovStats — plotCovStats","text":"Plots coverage statistics, fingerprint plot.","code":""},{"path":"https://ethz-ins.github.io/epiwraps/reference/plotCovStats.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"plotCovStats — plotCovStats","text":"","code":"plotCovStats(qc, labels = \"AUTO\", show.legend = TRUE)"},{"path":"https://ethz-ins.github.io/epiwraps/reference/plotCovStats.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"plotCovStats — plotCovStats","text":"qc list coverage statistics, produced getCovStats. labels Passed plot_grid.","code":""},{"path":"https://ethz-ins.github.io/epiwraps/reference/plotCovStats.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"plotCovStats — plotCovStats","text":"grid object plotted.","code":""},{"path":"https://ethz-ins.github.io/epiwraps/reference/plotCovStats.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"plotCovStats — plotCovStats","text":"","code":"# we use an example bigwig file bwf <- system.file(\"extdata/example_atac.bw\", package=\"epiwraps\") # because most of the file is empty, we'll exclude some of the ranges cs <- getCovStats(bwf, exclude=GRanges(\"1\", IRanges(1, 4300000))) plotCovStats(cs)"},{"path":"https://ethz-ins.github.io/epiwraps/reference/plotEnrichedHeatmaps.html","id":null,"dir":"Reference","previous_headings":"","what":"plotEnrichedHeatmaps: Plots heatmaps of signals around a set of regions — plotEnrichedHeatmaps","title":"plotEnrichedHeatmaps: Plots heatmaps of signals around a set of regions — plotEnrichedHeatmaps","text":"Plots enrichment heatmaps output signal2Matrix (.e. EnrichmentSE object list signal matrices). convenience wrapper around EnrichedHeatmap.","code":""},{"path":"https://ethz-ins.github.io/epiwraps/reference/plotEnrichedHeatmaps.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"plotEnrichedHeatmaps: Plots heatmaps of signals around a set of regions — plotEnrichedHeatmaps","text":"","code":"plotEnrichedHeatmaps(   ml,   trim = c(0.02, 0.98),   assay = 1L,   colors = NULL,   scale_title = \"density\",   column_title = NULL,   multiScale = NULL,   column_title_gp = gpar(fontsize = 11),   row_order = NULL,   cluster_rows = FALSE,   row_split = NULL,   axis_name = NULL,   minRowVal = 0,   scale_rows = FALSE,   top_annotation = TRUE,   left_annotation = NULL,   right_annotation = NULL,   mean_color = \"red\",   mean_scale_side = NULL,   mean_trim = TRUE,   show_heatmap_legend = TRUE,   use_raster = NULL,   ... )"},{"path":"https://ethz-ins.github.io/epiwraps/reference/plotEnrichedHeatmaps.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"plotEnrichedHeatmaps: Plots heatmaps of signals around a set of regions — plotEnrichedHeatmaps","text":"ml named matrix list produced signal2Matrix, `EnrichmentSE` object. trim quantile trim values colorscale. numeric vector length 2, used lower upper quantiles beyond trim. assay Assay use (ignored unless `ml` ESE object) colors heatmap colors use, vector least two colors interpolate. Can also list color scales, many slots tracks `ml`. list single colors, color scale white color used track. Defaults 'inferno' viridis palette. scale_title title scale. Ignored `multiScale=TRUE`. multiScale Logical; whether use different scale track. Defaults TRUE `colors` list, otherwise FALSE. column_title_gp Graphic parameters column titles (see gpar) row_order Optional order rows. cluster_rows Logical; whether cluster rows. Alternatively, `cluster_rows=\"sort\"` sort rows using angle MDS based enriched_score signals (can long compute large matrices). `cluster_rows=FALSE` (default) results traditional sorting decreasing `enriched_score`. row_split Variable according rows split. either name column `rowData(ml)`, factor/ character vector length equal number regions `ml`. axis_name vector length 3 giving labels put respectively left, center right x axis heatmap. minRowVal Minimum value row included scale_rows Whether scale rows, either FALSE (default), 'local' (scales matrix separately) 'global'. top_annotation Either logical indicating whether plot summary profile top heatmap, named list parameters   passed `anno_enrich`,   HeatmapAnnotation-class object   passed EnrichedHeatmap. Additionally,   `ml` `ESE` object, `top_annotation` can vector colData column   names. left_annotation Passed EnrichedHeatmap right_annotation Passed EnrichedHeatmap mean_color Color mean signal line top annotation. `row_split` used, `mean_color` can named vector indicating colors cluster. Can also `gpar` object. mean_scale_side side show y-axis scale mean plots. Either \"\" (default), \"left\", \"right\", \"none\". mean_trim Logical; whether apply trimming also mean plot. show_heatmap_legend Logical, whether show heatmap legend use_raster Logical; whether render heatmap body raster image. Turned default matrix dimensions greater 1500. ... Passed EnrichedHeatmap","code":""},{"path":"https://ethz-ins.github.io/epiwraps/reference/plotEnrichedHeatmaps.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"plotEnrichedHeatmaps: Plots heatmaps of signals around a set of regions — plotEnrichedHeatmaps","text":"HeatmapList object","code":""},{"path":"https://ethz-ins.github.io/epiwraps/reference/plotEnrichedHeatmaps.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"plotEnrichedHeatmaps: Plots heatmaps of signals around a set of regions — plotEnrichedHeatmaps","text":"plotting large matrices, heatmap body rasterized keep memory footprint decent. work well, make sure `magick` package installed. Depending settings, heatmap big might hit preset limits `magick` base rasterization, result error 'Image must least 1 frame write bitmap'. cases, might degrade lower-quality rasterization using additional arguments `raster_by_magick=FALSE, raster_device=\"CairoJPEG\"` . Alternatively, best solution increase size memory limits `policy.xml` configuration underlying (non-R) imagemagick library.","code":""},{"path":"https://ethz-ins.github.io/epiwraps/reference/plotEnrichedHeatmaps.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"plotEnrichedHeatmaps: Plots heatmaps of signals around a set of regions — plotEnrichedHeatmaps","text":"","code":"# we first load an example EnrichmentSE, as produced by signal2Matrix: data(exampleESE) plotEnrichedHeatmaps(exampleESE)  # we could also just plot one with: # plotEnrichedHeatmaps(exampleESEm[,1]) # or change the aesthetics, e.g.: plotEnrichedHeatmaps(exampleESE, trim=0.98, scale_title=\"RPKM\",                       colors=c(\"white\",\"darkred\"), row_title=\"My regions\")  # any argument accepted by `EnrichedHeatmap` (and hence by  # `ComplexHeatmap::Heatmap`) can be used."},{"path":"https://ethz-ins.github.io/epiwraps/reference/plotSignalTracks.html","id":null,"dir":"Reference","previous_headings":"","what":"plotSignalTracks — plotSignalTracks","title":"plotSignalTracks — plotSignalTracks","text":"wrapper around `Gviz` quick plotting genomic signals single region.","code":""},{"path":"https://ethz-ins.github.io/epiwraps/reference/plotSignalTracks.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"plotSignalTracks — plotSignalTracks","text":"","code":"plotSignalTracks(   files = list(),   region,   ensdb = NULL,   colors = \"darkblue\",   type = \"histogram\",   genomeAxis = 0.3,   extend = 0.15,   aggregation = c(\"mean\", \"median\", \"sum\", \"max\", \"min\", \"heatmap\", \"overlay\",     \"heatmap+mean\"),   transcripts = c(\"collapsed\", \"full\", \"coding\", \"none\"),   genes.params = list(col.line = \"grey40\", col = NULL, fill = \"#000000\"),   align.params = list(color = NULL),   tracks.params = list(),   extraTracks = list(),   background.title = \"white\",   col.axis = \"grey40\",   bed.rotation.title = 0,   col.title = \"black\",   cex.title = 0.65,   overlay.alpha = 100,   normFactors = NULL,   ... )"},{"path":"https://ethz-ins.github.io/epiwraps/reference/plotSignalTracks.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"plotSignalTracks — plotSignalTracks","text":"files named list vector paths signal files  (e.g. bigwig/bam, also bed files). list, list elements overlaid aggregated (depending `aggregation` argument). Formats accepted DataTrack's `range` argument also accepted. Can also include `GRanges ` objects (plotted AnnotationTrack) objects inheriting GdObject class (.e. `Gviz` track object). region genomic region, either `GRanges` object string (.e. `region=\"chr5:10000-12000`). Alternatively, `ensdb` provided, gene name can given, gene's coordinates used region. ensdb optional EnsDb object form grab transcripts. colors Signal color(s); recycled elements `files` type Signal plot type(s); recycled elements `files`. ignored bed-like files, shown AnnotationTrack. See `type` options DataTrack. addition options, type 'alignments' can given bam files, display AlignmentsTrack. genomeAxis Whether plot genome axis. Alternatively, numeric scalar 0 1 can given, case scale plotted relative size. extend Either integer vector two integers indicating number base pairs extent either side. `extend`<=1, interpreted fraction plotted region. aggregation Method aggregation data tracks, one : 'mean' (default), 'median', 'max', 'overlay', 'heatmap', 'heatmap+mean'. latter create mean plot type `type` followed heatmap. transcripts Whether show transcripts (reguires `ensdb`) \"full\", \"collapsed\" (default), \"coding\" (coding transcripts) \"none\". Alternatively, can custom GeneRegionTrack object. genes.params Named list parameters passed GeneRegionTrack. align.params Named list parameters passed AlignmentsTrack. used plotting bam files `type=\"alignments\"`. tracks.params Named list parameters passed DataTrack. extraTracks List extra custom tracks plotted. background.title background color track titles. col.axis color axes. bed.rotation.title Rotation track titles bed files. col.title color track titles. cex.title Expension factor font size track titles. overlay.alpha Transparency (0 250) overlaying tracks. ... Passed plotTracks.","code":""},{"path":"https://ethz-ins.github.io/epiwraps/reference/plotSignalTracks.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"plotSignalTracks — plotSignalTracks","text":"list GenomeGraph tracks plotted.","code":""},{"path":"https://ethz-ins.github.io/epiwraps/reference/plotSignalTracks.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"plotSignalTracks — plotSignalTracks","text":"","code":"# fetch path to example bigwig file: (bw <- system.file(\"extdata/example_rna.bw\", package=\"epiwraps\")) #> [1] \"/home/runner/work/_temp/Library/epiwraps/extdata/example_rna.bw\" plotSignalTracks(list(track1=bw), region=\"8:22165140-22212326\")  # if we had an EnsDb object loaded, we could just input a gene instead of  # coordinates, and the transcript models would automatically show (not run): # plotSignalTracks(list(track1=bw), region=\"BMP1\", ensdb=ensdb) # show all transcript variants: # plotSignalTracks(list(tracks=bw), region=\"BMP1\", ensdb=ensdb, #                  transcripts=\"full\")"},{"path":"https://ethz-ins.github.io/epiwraps/reference/reduceWithResplit.html","id":null,"dir":"Reference","previous_headings":"","what":"Merge regions, re-splitting large merges using local overlap minima — reduceWithResplit","title":"Merge regions, re-splitting large merges using local overlap minima — reduceWithResplit","text":"alternative something like reduce(unlist(GRangesList(peaks))) merging overlapping regions\" tries break large merged regions based profile overlap un-merged regions. typically use merge instance peaks called different samples.","code":""},{"path":"https://ethz-ins.github.io/epiwraps/reference/reduceWithResplit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Merge regions, re-splitting large merges using local overlap minima — reduceWithResplit","text":"","code":"reduceWithResplit(   peaks,   softMaxSize = 500L,   relTroughDepth = 1/3,   minTroughDepth = 2L,   minTroughWidth = 1L,   minDistFromBoundary = 150L,   minPeakSize = 100L,   BPPARAM = BiocParallel::SerialParam() )"},{"path":"https://ethz-ins.github.io/epiwraps/reference/reduceWithResplit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Merge regions, re-splitting large merges using local overlap minima — reduceWithResplit","text":"peaks list GRanges-class, GRanges-class containing overlapping regions. softMaxSize (merged) peak size re-splitting attempted relTroughDepth minimum depth local minima, fraction maximum. E.g. maxima 12 peaks, default 1/4 require minima equal 9. minTroughDepth absolute minimum depth local minima, number peaks maxima. minTroughWidth minimum width local minima. minDistFromBoundary minimum distance local minima peak border. minPeakSize minimum final peak size. BPPARAM BiocParallel Param object multithreading. set, chromosomes split threads.","code":""},{"path":"https://ethz-ins.github.io/epiwraps/reference/reduceWithResplit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Merge regions, re-splitting large merges using local overlap minima — reduceWithResplit","text":"reduced `GRanges` non-overlapping peaks.","code":""},{"path":"https://ethz-ins.github.io/epiwraps/reference/reduceWithResplit.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Merge regions, re-splitting large merges using local overlap minima — reduceWithResplit","text":"alternative something like reduce(unlist(GRangesList(peaks))), stitches overlapping regions together can result large regions can problematic applications. function tries break large regions composing using coverage original (un-merged) regions. See example illustration. procedure first reduces `peaks`, identifies reduced regions whose width certain threshold (`softMaxSize`). regions, coverage original peaks computed identify local minima ('troughs') coverage divide region sub-regions desirable lengths. `relThroughDepth` determines minimum depth trough (.e. decrease) fraction maximum coverage region, `minTroughDepth` determines absolute minimum depth. Note algorithm iterates regions one one quite slow, hence multithreading recommended large sets regions.","code":""},{"path":"https://ethz-ins.github.io/epiwraps/reference/reduceWithResplit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Merge regions, re-splitting large merges using local overlap minima — reduceWithResplit","text":"","code":"# consider the following example set of regions: gr <- GRanges(\"1\", IRanges(c(100,120,140,390,410,430,120),                            width=rep(c(200,520),c(6,1)))) plotSignalTracks(list(regions=gr, \"# overlapping regions\"=coverage(gr),                       reduced=reduce(gr)), region=reduce(gr))  # if we are interested in having smaller regions, clearly it would seem  # sensible here to cut roughly in the middle, since we have two distinct  # groups of regions that are only joined by a single region  (redGr <- reduceWithResplit(gr, softMaxSize=100)) #> GRanges object with 2 ranges and 0 metadata columns: #>       seqnames    ranges strand #>          <Rle> <IRanges>  <Rle> #>   [1]        1   100-363      * #>   [2]        1   365-639      * #>   ------- #>   seqinfo: 1 sequence from an unspecified genome; no seqlengths plotSignalTracks(list(\"# overlapping regions\"=coverage(gr),                       reduced=reduce(gr), \"reduced\\n\\\\w resplit\"=redGr),                       region=reduce(gr))"},{"path":"https://ethz-ins.github.io/epiwraps/reference/refragment.html","id":null,"dir":"Reference","previous_headings":"","what":"refragment — refragment","title":"refragment — refragment","text":"Uses cut profiles re-fragment silico fragments contain   nucleosome.","code":""},{"path":"https://ethz-ins.github.io/epiwraps/reference/refragment.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"refragment — refragment","text":"","code":"refragment(   bam,   minSize = 20L,   nfr = 120L,   nuc = c(145, 190),   binSize = 10L,   verbose = TRUE,   BPPARAM = BiocParallel::SerialParam() )"},{"path":"https://ethz-ins.github.io/epiwraps/reference/refragment.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"refragment — refragment","text":"bam Path paired-end bam file, `GRanges` fragments. minSize Minimum fragment size nfr Maximum size nucleosome-free fragments nuc Range (min & max) mono-nucleosome fragment sizes binSize Bin size cut profile verbose Logical; whether print progress messages BPPARAM `BiocParallel` param multithreading.","code":""},{"path":"https://ethz-ins.github.io/epiwraps/reference/refragment.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"refragment — refragment","text":"list processed fragment `GRanges`, including nucleosome-free,   mono-nucleosome, ambiguous fragments.","code":""},{"path":"https://ethz-ins.github.io/epiwraps/reference/regionCAT.html","id":null,"dir":"Reference","previous_headings":"","what":"regionCAT — regionCAT","title":"regionCAT — regionCAT","text":"Computes/plots 'concordance top' (CAT) two lists genomic   regions.","code":""},{"path":"https://ethz-ins.github.io/epiwraps/reference/regionCAT.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"regionCAT — regionCAT","text":"","code":"regionCAT(   regions1,   regions2,   start = 5L,   concord.type = c(\"both\", \"inTop\", \"inAll\"),   returnData = FALSE,   ignore.strand = TRUE )"},{"path":"https://ethz-ins.github.io/epiwraps/reference/regionCAT.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"regionCAT — regionCAT","text":"regions1, regions2 GRanges object `score` metadata column according regions ranked (descending). start rank start plotting (removes large variations beginning regions considered) concord.type Concordance type plot, either 'inTop', 'inAll', '' (see details). Ignored `returnData=TRUE`. returnData Logical; whether return data instead plotting. ignore.strand Logical; whether ignore strand computing overlap (default TRUE)","code":""},{"path":"https://ethz-ins.github.io/epiwraps/reference/regionCAT.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"regionCAT — regionCAT","text":"ggplot object, data.frame `returnData=TRUE`.","code":""},{"path":"https://ethz-ins.github.io/epiwraps/reference/regionCAT.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"regionCAT — regionCAT","text":"two concordance types follows: * 'inTop' indicates proportion top X regions top   X lists. * '' indicates proportion top X regions anywhere   list (since relationship asymmetrical, mean   two directions used).","code":""},{"path":"https://ethz-ins.github.io/epiwraps/reference/regionCAT.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"regionCAT — regionCAT","text":"","code":"# we create two GRanges with scores, which have similar high-score peaks but # the rest random: gr1 <- GRanges(\"seq1\", IRanges(runif(20,1,2000), width=20),                score=20:1) gr2 <- GRanges(\"seq1\", c(head(ranges(gr1),5),                          IRanges(runif(15,1,2000), width=20)),                score=c(20:16, sample.int(15))) regionCAT(gr1,gr2)"},{"path":"https://ethz-ins.github.io/epiwraps/reference/regionOverlaps.html","id":null,"dir":"Reference","previous_headings":"","what":"regionOverlaps — regionOverlaps","title":"regionOverlaps — regionOverlaps","text":"wrapper visualizing pairwise-wise overlaps across multiple sets genomic ranges.","code":""},{"path":"https://ethz-ins.github.io/epiwraps/reference/regionOverlaps.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"regionOverlaps — regionOverlaps","text":"","code":"regionOverlaps(   listOfRegions,   ignore.strand = TRUE,   cluster = length(listOfRegions) > 2,   color = viridis::plasma(100),   number_color = \"black\",   ... )"},{"path":"https://ethz-ins.github.io/epiwraps/reference/regionOverlaps.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"regionOverlaps — regionOverlaps","text":"listOfRegions named list two (non-empty) `GRanges` ignore.strand Logical; whether ignore strand overlaps cluster Logical; whether cluster rows/columns color Heatmap colorscale number_color Values color ... Passed pheatmap","code":""},{"path":"https://ethz-ins.github.io/epiwraps/reference/regionOverlaps.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"regionOverlaps — regionOverlaps","text":"`Heatmap` showing overlap coefficient colors,   overlap size values.","code":""},{"path":"https://ethz-ins.github.io/epiwraps/reference/regionOverlaps.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"regionOverlaps — regionOverlaps","text":"","code":"# random list of GRanges: grl <- lapply(c(A=10,B=20,C=30), FUN=function(x){   GRanges(\"seq1\", IRanges(runif(x,1,1000), width=20)) }) regionOverlaps(grl)"},{"path":"https://ethz-ins.github.io/epiwraps/reference/regionUpset.html","id":null,"dir":"Reference","previous_headings":"","what":"regionUpset — regionUpset","title":"regionUpset — regionUpset","text":"wrapper around upset comparing multiple sets genomic ranges.","code":""},{"path":"https://ethz-ins.github.io/epiwraps/reference/regionUpset.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"regionUpset — regionUpset","text":"","code":"regionUpset(   x,   reference = c(\"reduce\", \"disjoin\"),   returnList = FALSE,   ignore.strand = FALSE,   maxgap = -1L,   minoverlap = 0L,   ... )"},{"path":"https://ethz-ins.github.io/epiwraps/reference/regionUpset.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"regionUpset — regionUpset","text":"x named list genomic ranges (paths bed files) reference method creating reference windows ('reduce' 'disjoin'). Alternatively, `GRanges` object reference windows. returnList Logical; whether return list instead plotting. ignore.strand Logical; whether ignore strands computing overlaps (default FALSE). Strand information ignored either compared sets regions unstranded. maxgap Maximum gap regions count overlap (see findOverlaps-methods). minoverlap Minimum overlap count match (see findOverlaps-methods). ... plotting arguments passed upset.","code":""},{"path":"https://ethz-ins.github.io/epiwraps/reference/regionUpset.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"regionUpset — regionUpset","text":"plot","code":""},{"path":"https://ethz-ins.github.io/epiwraps/reference/regionUpset.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"regionUpset — regionUpset","text":"","code":"# random list of GRanges: grl <- lapply(c(A=10,B=20,C=30), FUN=function(x){   GRanges(\"seq1\", IRanges(runif(x,1,1000), width=20)) }) regionUpset(grl)"},{"path":"https://ethz-ins.github.io/epiwraps/reference/renormalizeSignalMatrices.html","id":null,"dir":"Reference","previous_headings":"","what":"renormalizeSignalMatrices — renormalizeBorders","title":"renormalizeSignalMatrices — renormalizeBorders","text":"Renormalizes list signal matrices EnrichmentSE object.","code":""},{"path":"https://ethz-ins.github.io/epiwraps/reference/renormalizeSignalMatrices.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"renormalizeSignalMatrices — renormalizeBorders","text":"","code":"renormalizeBorders(ml, trim = NULL, assay = \"input\", nWindows = NULL)  renormalizeSignalMatrices(   ml,   method = c(\"border\", \"top\", \"manual\"),   trim = NULL,   fromAssay = \"input\",   toAssay = NULL,   nWindows = NULL,   scaleFactors = NULL,   ... )"},{"path":"https://ethz-ins.github.io/epiwraps/reference/renormalizeSignalMatrices.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"renormalizeSignalMatrices — renormalizeBorders","text":"ml named matrix list EnrichmentSE object produced signal2Matrix. trim Quantiles trimmed extreme calculating normalization factors. method Either \"border\" \"top\" (see details ). fromAssay Assay use (ignored unless `ml` EnrichmentSE object), defaults first assay. toAssay Assay store normalized data (ignored unless `ml` EnrichmentSE object). default assay name set based normalization method used. scaleFactors numeric vector length `ml`, indicating scaling factors multiply matrix. Alternatively, numeric matrix number rows equal length `ml`, two columns indicating alpha beta arguments s3norm normalization. Ignored unless `method=\"manual\"`.","code":""},{"path":"https://ethz-ins.github.io/epiwraps/reference/renormalizeSignalMatrices.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"renormalizeSignalMatrices — renormalizeBorders","text":"Either renormalized list signal matrices , `ml`   `EnrichmentSE` object, object additional normalized   assay automatically put front.","code":""},{"path":"https://ethz-ins.github.io/epiwraps/reference/renormalizeSignalMatrices.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"renormalizeSignalMatrices — renormalizeBorders","text":"* `method=\"border\"` works assumption left/right borders matrices represent background signal equal across samples. result, work 1) left/right borders matrices sufficiently far signal (e.g. peaks) chiefly noise, 2) signal--noise ratio comparable across tracks/samples. * `method=\"top\"` instead works assumption highest signal across tracks/samples. default, extreme values trimmed establishing either kind normalization factor. proportion trimmed can set using `trim` argument, default 10 * `method=\"manual\"` enables use independently computed normalization factors, instance obtained getNormFactors.","code":""},{"path":"https://ethz-ins.github.io/epiwraps/reference/renormalizeSignalMatrices.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"renormalizeSignalMatrices — renormalizeBorders","text":"renormalizeBorders(): deprecated > renormalizeSignalMatrices","code":""},{"path":"https://ethz-ins.github.io/epiwraps/reference/renormalizeSignalMatrices.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"renormalizeSignalMatrices — renormalizeBorders","text":"","code":"# we first get an EnrichmentSE object: data(exampleESE) # we normalize them m <- renormalizeSignalMatrices(m) #> Error: object 'm' not found # see the `vignette(\"multiRegionPlot\")` for more info on normalization."},{"path":"https://ethz-ins.github.io/epiwraps/reference/resizeMatrix.html","id":null,"dir":"Reference","previous_headings":"","what":"resize a numeric matrix to given dimensions — resizeMatrix","title":"resize a numeric matrix to given dimensions — resizeMatrix","text":"resize numeric matrix given dimensions","code":""},{"path":"https://ethz-ins.github.io/epiwraps/reference/resizeMatrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"resize a numeric matrix to given dimensions — resizeMatrix","text":"","code":"resizeMatrix(mat, ndim = dim(mat), method = c(\"mean\", \"max\", \"min\"))"},{"path":"https://ethz-ins.github.io/epiwraps/reference/resizeMatrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"resize a numeric matrix to given dimensions — resizeMatrix","text":"mat numeric matrix ndim desired output dimensions method Whether use normal interpolation (`method=\"mean\"`, default), max min overlapping grid cells.","code":""},{"path":"https://ethz-ins.github.io/epiwraps/reference/resizeMatrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"resize a numeric matrix to given dimensions — resizeMatrix","text":"numeric matrix dimensions `ndim`","code":""},{"path":"https://ethz-ins.github.io/epiwraps/reference/resizeMatrix.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"resize a numeric matrix to given dimensions — resizeMatrix","text":"cased based Vyha's implementation (taken  https://stackoverflow.com//23429527 ), adding possibility  replace normal interpolation max/min overlapping grid cells. works well desired dimensions least half input ones. desired dimensions smaller, different binning method used, first applied columns rows.","code":""},{"path":"https://ethz-ins.github.io/epiwraps/reference/showTrackInfo.html","id":null,"dir":"Reference","previous_headings":"","what":"showTrackInfo — showTrackInfo","title":"showTrackInfo — showTrackInfo","text":"Provide information relative signal ranges track.","code":""},{"path":"https://ethz-ins.github.io/epiwraps/reference/showTrackInfo.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"showTrackInfo — showTrackInfo","text":"","code":"showTrackInfo(x, assay = \"input\", doPrint = TRUE)"},{"path":"https://ethz-ins.github.io/epiwraps/reference/showTrackInfo.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"showTrackInfo — showTrackInfo","text":"x named list signal matrices EnrichmentSE object produced signal2Matrix assay assay use, defaults input assay. doPrint Logical; whether print information.","code":""},{"path":"https://ethz-ins.github.io/epiwraps/reference/showTrackInfo.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"showTrackInfo — showTrackInfo","text":"invisible list captions.","code":""},{"path":"https://ethz-ins.github.io/epiwraps/reference/showTrackInfo.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"showTrackInfo — showTrackInfo","text":"","code":"data(exampleESE) showTrackInfo(exampleESE) #> H3K27ac ( 150x80 ) : #>   -2kb/+2kb (40 windows each) #>   around the centers of given regions  #> H3K4me3 ( 150x80 ) : #>   -2kb/+2kb (40 windows each) #>   around the centers of given regions  #> p300 ( 150x80 ) : #>   -2kb/+2kb (40 windows each) #>   around the centers of given regions"},{"path":"https://ethz-ins.github.io/epiwraps/reference/signal2Matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"signal2Matrix: reads the signals in/around a set of genomic regions. — signal2Matrix","title":"signal2Matrix: reads the signals in/around a set of genomic regions. — signal2Matrix","text":"Reads signals bam/bigwig files within /around (centers ) set regions, outputs EnrichmentSE object.","code":""},{"path":"https://ethz-ins.github.io/epiwraps/reference/signal2Matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"signal2Matrix: reads the signals in/around a set of genomic regions. — signal2Matrix","text":"","code":"signal2Matrix(   filepaths,   regions,   extend = 2000,   w = NULL,   scaling = TRUE,   scaledBins = round(max(extend)/w),   type = c(\"center\", \"scaled\"),   binMethod = c(\"mean\", \"max\", \"min\"),   BPPARAM = 1L,   ret = c(\"EnrichmentSE\", \"list\"),   verbose = TRUE,   ... )"},{"path":"https://ethz-ins.github.io/epiwraps/reference/signal2Matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"signal2Matrix: reads the signals in/around a set of genomic regions. — signal2Matrix","text":"filepaths named vector filepaths (e.g. bigwig files; bam files also supported, limited functionalities). Can also named list including combination paths files `GRanges` object. `GRanges` objects, `score` column used (absolute coverage mode). regions `GRanges` regions/positions around plot, path bed file regions. `type=\"scaled\"`, `regions` can also `GRangesList`, case coverage subregions stiched together (e.g. plotting exonic signal transcripts). extend Number basepair extend either side regions. Must multiple `w`. Can also integer length 2, indicating extension upstream downstream. w Bin width number nucleotides. Defaults width producing 200 bins whole extended range. scaledBins number bins scale region (ignored `type=\"center\"`) type Either 'center' (plots fixed-size region around centers `regions`) 'scaled' (scales signal `regions` plot surroundings) binMethod Whether compute 'max' (default), 'mean' 'min' per bin. BPPARAM BiocParallelParam object, number threads use read prepare data. Note rate-limiting process reading disk, unless unusually fast disk, using multi-threading actually likely slow rather speed process. ret type output return, either \"EnrichmentSE\" object (default), simple list signal matrices (\"list\"). verbose Logical; whether print processing information ... Passed normalizeToMatrix .normalizedMatrix, bam2bw reading bam files. example, can used pass arguments `normalizeToMatrix` `smooth=TRUE`.","code":""},{"path":"https://ethz-ins.github.io/epiwraps/reference/signal2Matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"signal2Matrix: reads the signals in/around a set of genomic regions. — signal2Matrix","text":"list `normalizeToMatrix` objects","code":""},{"path":"https://ethz-ins.github.io/epiwraps/reference/signal2Matrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"signal2Matrix: reads the signals in/around a set of genomic regions. — signal2Matrix","text":"","code":"# we fetch the path to the example bigwig file: (bw <- system.file(\"extdata/example_atac.bw\", package=\"epiwraps\")) #> [1] \"/home/runner/work/_temp/Library/epiwraps/extdata/example_atac.bw\" # we load example regions: regions <- rtracklayer::import(system.file(\"extdata/example_peaks.bed\",                                             package=\"epiwraps\")) length(regions) #> [1] 150 # we obtain the matrix of the signal around the regions: m <- signal2Matrix(bw, regions) #> Reading /home/runner/work/_temp/Library/epiwraps/extdata/example_atac.bw # we can plot it with: plotEnrichedHeatmaps(m)  # we could also take a broader range around the center of the regions, and  # use bigger bins: m <- signal2Matrix(bw, regions, extend=2000, w=20) #> Reading /home/runner/work/_temp/Library/epiwraps/extdata/example_atac.bw plotEnrichedHeatmaps(m)"},{"path":"https://ethz-ins.github.io/epiwraps/reference/signalsAcrossSamples.html","id":null,"dir":"Reference","previous_headings":"","what":"signalsAcrossSamples — signalsAcrossSamples","title":"signalsAcrossSamples — signalsAcrossSamples","text":"Obtain matrix score/coverages across region list BigWig files.","code":""},{"path":"https://ethz-ins.github.io/epiwraps/reference/signalsAcrossSamples.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"signalsAcrossSamples — signalsAcrossSamples","text":"","code":"signalsAcrossSamples(files, region, ignore.strand = TRUE)"},{"path":"https://ethz-ins.github.io/epiwraps/reference/signalsAcrossSamples.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"signalsAcrossSamples — signalsAcrossSamples","text":"files named list paths biwgig files `GRanges` objects `score` column. region region interest, either given string (\"chr:start-end\" format) `GRanges` length 1. ignore.strand Logical; whether merge scores two strands given stranded objects.","code":""},{"path":"https://ethz-ins.github.io/epiwraps/reference/signalsAcrossSamples.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"signalsAcrossSamples — signalsAcrossSamples","text":"disjoined `GRanges object` scores metadata columns.","code":""},{"path":"https://ethz-ins.github.io/epiwraps/reference/tabixChrApply.html","id":null,"dir":"Reference","previous_headings":"","what":"tabixChrApply — tabixChrApply","title":"tabixChrApply — tabixChrApply","text":"Runs function reads/fragments chromosomes Tabix-indexed fragment file. especially used functions avoid loading alignments memory, parallelize reads processing.","code":""},{"path":"https://ethz-ins.github.io/epiwraps/reference/tabixChrApply.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"tabixChrApply — tabixChrApply","text":"","code":"tabixChrApply(   x,   fn,   keepSeqLvls = NULL,   exclude = NULL,   only = NULL,   BPPARAM = SerialParam(),   ... )"},{"path":"https://ethz-ins.github.io/epiwraps/reference/tabixChrApply.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"tabixChrApply — tabixChrApply","text":"x path tabix-indexed bam file, TabixFile object. fn function run, first argument `GRanges` keepSeqLvls optional vector seqLevels keep  BPPARAM `BiocParallel` parameter object multithreading. Note used, memory usage high; context recommend high `nChunks`. ... Passed `fn`","code":""},{"path":"https://ethz-ins.github.io/epiwraps/reference/tabixChrApply.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"tabixChrApply — tabixChrApply","text":"list whatever `fn` returns","code":""},{"path":"https://ethz-ins.github.io/epiwraps/reference/tileRle.html","id":null,"dir":"Reference","previous_headings":"","what":"tileRle — tileRle","title":"tileRle — tileRle","text":"Creates Rle fixed-bins continuous numeric Rle","code":""},{"path":"https://ethz-ins.github.io/epiwraps/reference/tileRle.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"tileRle — tileRle","text":"","code":"tileRle(x, bs = 10L, method = c(\"max\", \"min\", \"mean\"), roundSummary = FALSE)"},{"path":"https://ethz-ins.github.io/epiwraps/reference/tileRle.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"tileRle — tileRle","text":"x numeric `Rle` (`RleList`) bs positive integer specifying bin size method method summarizing bins roundSummary Logical; whether round bins summarized coverage (default FALSE)","code":""},{"path":"https://ethz-ins.github.io/epiwraps/reference/tileRle.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"tileRle — tileRle","text":"object class length `x`","code":""},{"path":"https://ethz-ins.github.io/epiwraps/reference/tileRle.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"tileRle — tileRle","text":"","code":"# creating a dummy coverage and visualizing it: cov <- Rle(rpois(100,0.5)) plot(cov, type=\"l\", col=\"lightgrey\") # summarizing to tiles of width 5 (by default using maximum) cov2 <- tileRle(cov, bs=5L) lines(cov2, col=\"red\")"},{"path":"https://ethz-ins.github.io/epiwraps/reference/views2Matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"views2Matrix — views2Matrix","title":"views2Matrix — views2Matrix","text":"converts RleViews RleViewsList views width matrix, setting --bounds regions NA (`padVal`).","code":""},{"path":"https://ethz-ins.github.io/epiwraps/reference/views2Matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"views2Matrix — views2Matrix","text":"","code":"views2Matrix(v, padVal = NA_integer_)"},{"path":"https://ethz-ins.github.io/epiwraps/reference/views2Matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"views2Matrix — views2Matrix","text":"v `RleViews` `RleViewsList` object views width. padVal value assign --bound regions.","code":""},{"path":"https://ethz-ins.github.io/epiwraps/reference/views2Matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"views2Matrix — views2Matrix","text":"numeric matrix.","code":""},{"path":"https://ethz-ins.github.io/epiwraps/reference/views2Matrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"views2Matrix — views2Matrix","text":"","code":"# we create an example RleViews with out-of-bound regions: library(IRanges) co <- Rle(values=c(0,1,0), lengths=c(100,50,20)) v <- Views(co, c(25,150),c(50,175)) # convert to matrix views2Matrix(v) #>      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] [,11] [,12] [,13] [,14] #> [1,]    0    0    0    0    0    0    0    0    0     0     0     0     0     0 #> [2,]    1    0    0    0    0    0    0    0    0     0     0     0     0     0 #>      [,15] [,16] [,17] [,18] [,19] [,20] [,21] [,22] [,23] [,24] [,25] [,26] #> [1,]     0     0     0     0     0     0     0     0     0     0     0     0 #> [2,]     0     0     0     0     0     0     0    NA    NA    NA    NA    NA"}]
